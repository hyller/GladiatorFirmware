From: <Saved by Blink>
Subject: CLOC -- Count Lines of Code
Date: Thu, 8 Jul 2015 06:26:40 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_D6C5_38402F7D.C5F44288"

------=_NextPart_000_D6C5_38402F7D.C5F44288
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: http://cloc.sourceforge.net/

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head>=
<meta charset=3D"windows-1252">

  <link rel=3D"stylesheet" href=3D"http://cloc.sourceforge.net/style.css" t=
ype=3D"text/css">
  <!--
  <link rel=3D"stylesheet" href=3D"index_files/style.css" type=3D"text/css"=
>
    -->
  <title>CLOC -- Count Lines of Code</title>
  <meta http-equiv=3D"refresh" content=3D"86400">
 </head>
 <body>
 <!-- style.css taken from search.cpan.org -->

 <a name=3D"_top"></a>
=20
 <center>
 <div class=3D"path">
 <b><big><big>CLOC</big></big></b>
 <br>
Count Lines of Code
 </div>
 </center>

<!-- top index {{{1 -->=20
<div class=3D"pod"> <a name=3D"___top"></a>
<div class=3D"pod">
<div class=3D"toc">
<div class=3D"indexgroup">
<ul class=3D"indexList indexList1">
  <li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforge.net=
/#Overview">Overview</a>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://sourceforge.net=
/project/showfiles.php?group_id=3D174787">Download</a>  (latest version: 1.=
64, released 2015-06-27)
    <ul class=3D"indexList indexList2">
    <li class=3D"indexItem indexItem2"><a href=3D"http://cloc.sourceforge.n=
et/#apt-get">npm, apt-get, yum, pacman</a>
    </li><li class=3D"indexItem indexItem2"><a href=3D"http://cloc.sourcefo=
rge.net/#Stable">Stable release</a>
    </li><li class=3D"indexItem indexItem2"><a href=3D"http://cloc.sourcefo=
rge.net/#Dev">Development version</a>
    </li></ul>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://sourceforge.net=
/projects/cloc/">SourceForge Project Page</a>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforg=
e.net/#License">License</a>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforg=
e.net/#why_use">Why Use cloc?</a>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforg=
e.net/#Other_Counters">Other Counters</a>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforg=
e.net/#Basic_Use">Basic Use</a>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforg=
e.net/#building_exe">Building a Windows Executable</a>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforg=
e.net/#Options">Options</a>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforg=
e.net/#Languages">Recognized Languages</a>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforg=
e.net/#How_it_works">How it Works</a>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforg=
e.net/#Advanced_Use">Advanced Use</a>
    <ul class=3D"indexList indexList2">
    <li class=3D"indexitem indexitem2"><a href=3D"http://cloc.sourceforge.n=
et/#strip_comments">Remove Comments from Source Code</a>
    </li><li class=3D"indexItem indexItem2"><a href=3D"http://cloc.sourcefo=
rge.net/#compressed_arch">Work with Compressed Archives</a>
    </li><li class=3D"indexItem indexItem2"><a href=3D"http://cloc.sourcefo=
rge.net/#diff">Differences</a>
    </li><li class=3D"indexItem indexItem2"><a href=3D"http://cloc.sourcefo=
rge.net/#custom_lang">Create Custom Language Definitions</a>
    </li><li class=3D"indexItem indexItem2"><a href=3D"http://cloc.sourcefo=
rge.net/#combine_reports">Combine Reports</a>
    </li><li class=3D"indexItem indexItem2"><a href=3D"http://cloc.sourcefo=
rge.net/#sql">SQL</a>
    </li><li class=3D"indexItem indexItem2"><a href=3D"http://cloc.sourcefo=
rge.net/#scale_factors">Third Generation Language Scale Factors</a>
    <!--
    <li class=3D'indexItem indexItem2'><a href=3D'#no3_output'>Suppress Thi=
rd Generation Language Output</a>
      -->
    </li></ul>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforg=
e.net/#Limitations">Limitations</a>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforg=
e.net/#AdditionalLanguages">How to Request Support for Additional Languages=
</a>
  <!--
  <li class=3D'indexItem indexItem1'><a href=3D'#Troubleshooting'>Troublesh=
ooting</a>
    <ul   class=3D'indexList indexList2>
    <li class=3D'indexItem indexItem2'><a href=3D'#ignored'>Some of my file=
s are ignored.</a>
    <li class=3D'indexItem indexItem2'><a href=3D'#extra_lang'>Why does clo=
c say I have files in language <i>XXX</i>?</a>
    </ul>
  -->
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforg=
e.net/#Author">Author</a>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforg=
e.net/#Acknowledgments">Acknowledgments</a>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforg=
e.net/#Copyright">Copyright</a>
  </li><li class=3D"indexItem indexItem1"><a href=3D"http://cloc.sourceforg=
e.net/#License">License</a>
</li></ul>
</div>
</div>
<!-- 1}}} -->

<!-- Overview {{{1 -->=20
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"Overview">Overview <img alt=3D"^" src=
=3D"http://cloc.sourceforge.net/up.gif"></a></h1>

<p>
[Translations:=20
<a href=3D"http://www.ajoft.com/wpaper/aj-cloc.html">Bulgarian</a>,
<a href=3D"http://www.trevister.com/blog/cloc.html">Polish</a>, =20
<a href=3D"http://science.webhostinggeeks.com/cloc">Serbo-Croatian</a>, =20
<a href=3D"http://jbs24.com/blog/cloc-grof-riadkov-kodu/">Slovakian</a>
]=20
</p>

<p>
cloc=20
counts blank lines, comment lines,
and physical lines of source code in <a href=3D"http://cloc.sourceforge.net=
/#Languages">many programming languages</a>.
Given two versions of a code base, cloc can compute
differences in blank, comment, and source lines.
It is written entirely in Perl with no dependencies outside the
standard distribution of Perl v5.6 and higher=20
(code from some external modules is <a href=3D"http://cloc.sourceforge.net/=
index.html#regexp_common">embedded within cloc</a>)
and so is quite portable.
cloc is known to run on many flavors of Linux, FreeBSD,
NetBSD, OpenBSD,
Mac OS X, AIX, HP-UX, Solaris, IRIX, z/OS, and Windows.
(To run the Perl source version of cloc on Windows one needs=20
<a href=3D"http://www.activestate.com/activeperl">ActiveState Perl</a>
5.6.1 or higher,=20
<a href=3D"http://strawberryperl.com/">Strawberry Perl</a>,=20
<a href=3D"http://www.cygwin.com/">Cygwin</a>, or=20
<a href=3D"http://mobaxterm.mobatek.net/">MobaXTerm</a> with
the Perl plug-in installed.
Alternatively one can use the=20
Windows binary of cloc generated with=20
<a href=3D"http://search.cpan.org/~rschupp/PAR-Packer-1.019/lib/pp.pm">
PAR::Packer</a>=20
to run on Windows computers that have neither Perl nor Cygwin.)
</p>
<p>
cloc contains code from David Wheeler's=20
<a href=3D"http://www.dwheeler.com/sloccount/">SLOCCount</a>,
Damian Conway and Abigail's Perl module
<a href=3D"http://search.cpan.org/~abigail/Regexp-Common-2.120/lib/Regexp/C=
ommon.pm">Regexp::Common</a>,
Sean M. Burke's Perl module
<a href=3D"http://search.cpan.org/~sburke/Win32-Autoglob-1.01/Autoglob.pm">=
Win32::Autoglob</a>, and Tye McQueen's Perl module
<a href=3D"http://search.cpan.org/~tyemq/Algorithm-Diff-1.1902/lib/Algorith=
m/Diff.pm">Algorithm::Diff</a>.
Language scale factors were derived from Mayes Consulting, LLC web site <a =
href=3D"http://softwareestimator.com/IndustryData2.htm">http://softwareesti=
mator.com/IndustryData2.htm</a>.
<!--
and Tye McQueen's module
<a href=3Dhttp://search.cpan.org/~tyemq/Algorithm-Diff-1.1902/lib/Algorithm=
/Diff.pm>Algorithm::Diff</a>.
-->
</p>
<!-- 1}}} -->
<!--   apt-get {{{1 -->=20
<h2><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"apt-get">Install via package manager<=
img alt=3D"^" src=3D"http://cloc.sourceforge.net/up.gif"></a></h2>
<p>
Depending your operating system, one of these
installation methods may work for you:
</p>
<p>
  </p><pre>  npm install -g cloc                    # https://www.npmjs.com=
/package/cloc
  sudo apt-get install cloc              # Debian, Ubuntu
  sudo yum install cloc                  # Fedora
  sudo pacman -S cloc                    # Arch
  </pre>
<p></p>
<!-- 1}}} -->
<!--   Stable {{{1 -->=20
<h2><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"Stable">Download stable release<img a=
lt=3D"^" src=3D"http://cloc.sourceforge.net/up.gif"></a></h2>
<p>
The source code, release notes, Windows executable, and Unix package
for the current stable release can be
found at <a href=3D"http://sourceforge.net/projects/cloc/files/cloc/v1.64/"=
>http://sourceforge.net/projects/cloc/files/cloc/v1.64/</a>.
</p>
<!-- 1}}} -->
<!--   Dev {{{1 -->=20
<h2><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"Dev">Download development version<img=
 alt=3D"^" src=3D"http://cloc.sourceforge.net/up.gif"></a></h2>
<p>
Source code for the latest Subversion commit can be found at
<a href=3D"http://sourceforge.net/p/cloc/code/HEAD/tree/trunk/cloc">http://=
sourceforge.net/p/cloc/code/HEAD/tree/trunk/cloc</a>.
</p>
<!-- 1}}} -->
<!-- License {{{1 -->=20
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"License">License<img alt=3D"^" src=3D=
"http://cloc.sourceforge.net/up.gif"></a></h1>
<p>
cloc is licensed under the=20
<a href=3D"http://www.gnu.org/licenses/gpl-2.0.html">GNU General Public Lic=
ense, v2</a>
, excluding
portions which are copied from other sources.  Code copied from the=20
Regexp::Common, Win32::Autoglob, and Algorithm::Diff Perl=20
modules is subject to the=20
<a href=3D"http://www.opensource.org/licenses/artistic-license-2.0.php">Art=
istic License</a>.
</p>
<!-- 1}}} -->
<!-- Why use cloc? {{{1 -->=20
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"why_use">Why Use cloc? <img alt=3D"^"=
 src=3D"http://cloc.sourceforge.net/up.gif"></a></h1>
<p>
cloc has many features that make it easy to use, thorough,
extensible, and portable:
</p><ol>
    <li> Exists as a single, self-contained file that requires minimal
         installation effort---just download the file and run it.
    </li><li> Can read language comment definitions from a file and thus
         potentially work with computer languages that do not yet exist.
    </li><li> Allows results from multiple runs to be summed together
         by language and by project.
    </li><li> Can produce results in a variety of formats:
         plain text, SQL, XML, YAML, comma separated values.
    </li><li> Can count code within compressed archives (tar balls, Zip fil=
es,=20
         Java .ear files).
    </li><li> Has numerous troubleshooting options.
    </li><li> Handles file and directory names with spaces and other unusua=
l=20
         characters.
    </li><li> Has no dependencies outside the standard Perl distribution.
    </li><li> Runs on Linux, FreeBSD, NetBSD, OpenBSD, Mac OS X, AIX,=20
         HP-UX, Solaris, IRIX,
         and z/OS systems that have Perl 5.6 or higher.
         The source version runs on Windows with either ActiveState
         Perl, Strawberry Perl, Cygwin, or MobaXTerm+Perl plugin. =20
         Alternatively on Windows one can run
         the Windows binary which has no dependencies.
</li></ol>
<p></p>
<!-- 1}}} -->
<!-- Other Counters {{{1 -->=20
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"Other_Counters">Other Counters <img a=
lt=3D"^" src=3D"http://cloc.sourceforge.net/up.gif"></a></h1>
<p>
If cloc does not suit your needs here are other freely available
counters to consider:
</p><ul>
<li> <a href=3D"http://www.sonarsource.org/">Sonar</a>
</li><li> <a href=3D"http://labs.ohloh.net/ohcount">Ohcount</a>
</li><li> <a href=3D"http://www.dwheeler.com/sloccount/">SLOCCount</a>
</li><li> <a href=3D"http://www.cmcrossroads.com/bradapp/clearperl/sclc.htm=
l">sclc</a>
</li><li> USC's <a href=3D"http://sunset.usc.edu/research/CODECOUNT/">CODEC=
OUNT</a>
</li><li> <a href=3D"http://freshmeat.net/projects/loc/">loc</a>
</li></ul>
<p></p>
<p>
Other references:
</p><ul>
<li> QSM's <a href=3D"http://www.qsm.com/CodeCounters.html">directory</a>
     of code counting tools.
</li><li> The <a href=3D"http://en.wikipedia.org/wiki/Source_lines_of_code"=
>Wikipedia entry</a>=20
     for source code line counts.
</li></ul>
<p></p>
<!-- 1}}} -->
<!-- Regexp::Common {{{1 -->
<h1><a name=3D"regexp_common">Regexp::Common, Digest::MD5, Win32::Autoglob,=
 Algorithm::Diff</a></h1>
<p>
Although cloc does not need Perl modules outside those found in the=20
standard distribution, cloc does rely on a few external modules.
Code from three of these external modules--Regexp::Common,
Win32::Autoglob, and Algorithm::Diff--is embedded within cloc. =20
A fourth module,
Digest::MD5, is used only if it is available.
If cloc finds Regexp::Common=20
or Algorithm::Diff
installed locally it will use those
installation.  If it doesn't, cloc will install the parts
of Regexp::Common
and/or Algorithm:Diff
it needs to temporary directories that are created
at the start of a cloc run then removed when the run is complete.   =20
The necessary code from Regexp::Common v2.120 and
Algorithm::Diff v1.1902 are embedded within
the cloc source code (see subroutines
<code>Install_Regexp_Common()</code> and
<code>Install_Algorithm_Diff()</code> ).
Only three lines are needed from Win32::Autoglob and these are
included directly in cloc.
</p>
<p>
Additionally, cloc will use Digest::MD5 to validate uniqueness among
input files if Digest::MD5 is installed locally.  If Digest::MD5 is
not found the file uniqueness check is skipped.
</p>
<p>
The Windows binary is built on a computer that has both Regexp::Common
and Digest::MD5 installed locally.
</p>
<!-- 1}}} -->
<!-- Building Windows exe {{{1 -->
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"building_exe">Building a Windows Exec=
utable <img alt=3D"^" src=3D"http://cloc.sourceforge.net/up.gif"></a></h1>
<p>
The default Windows download, <tt>cloc-1.64.exe</tt>, was built with=20
<a href=3D"http://search.cpan.org/~rschupp/PAR-Packer-1.019/lib/pp.pm">
PAR::Packer</a> on a Windows 7 computer with=20
<a href=3D"http://strawberryperl.com/">Strawberry Perl</a>.=20
Windows executables of cloc versions 1.60 and earlier were=20
built with
<a href=3D"http://www.indigostar.com/perl2exe.htm">perl2exe</a>
on a 32 bit Windows XP computer.  A small modification was made
to the cloc source code before passing it to perl2exe; lines 87 and
88 were uncommented:
</p><pre><font color=3D"gray">85</font>  # Uncomment next two lines when bu=
ilding Windows executable with perl2exe
<font color=3D"gray">86</font>  # or if running on a system that already ha=
s Regexp::Common.=20
<font color=3D"gray">87</font>  <font color=3D"red">#use Regexp::Common;
<font color=3D"gray">88</font>  #$HAVE_Rexexp_Common =3D 1;</font>
</pre>
<p></p>
<h4>Why is the Windows executable so large?</h4>
<p>
Windows executables of cloc versions 1.60 and earlier,=20
created with perl2exe as noted above,
are about 1.6 MB, while newer versions, created with <tt>PAR::Packer</tt>,
are 11 MB.
Why are the newer executables so much larger?=20
My theory is that perl2exe uses smarter tree pruning logic=20
than <tt>PAR::Packer</tt>, but that's pure speculation.
</p>
<h4>Create your own executable</h4>
<p>
If you have access to perl2exe, you can use it to create a tight
Windows executable.  See lines 84-87 in the cloc source code for
a minor code modification that is necessary when using perl2exe.
</p>
<p>
Otherwise,
to build a Windows executable with <tt>pp</tt> from <tt>PAR::Packer</tt>,
first install a Windows-based Perl distribution (for example
Strawberry Perl or ActivePerl) following their instructions.=20
Next, open
a command prompt, aka a DOS window and install the=20
PAR::Packer module.
Finally, invoke the newly installed <tt>pp</tt> command with the
cloc souce code to create an <tt>.exe</tt> file:
</p><pre>C:&gt; perl -MCPAN -e shell
cpan&gt; install PAR::Packer
cpan&gt; exit
C:&gt; pp cloc-1.64.pl
</pre>
A variation on the above is if you installed the portable version
of Strawberry Perl, you will need to run <tt>portableshell.bat</tt>
first to properly set up your environment.  The Strawberry Perl
derived executable on the SourceForge download area was created
with the portable version on a Windows 7 computer.
<p></p>
<!-- 1}}} -->
<!-- Basic Use {{{1 -->
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"Basic_Use">Basic Use <img alt=3D"^" s=
rc=3D"http://cloc.sourceforge.net/up.gif"></a></h1>
<p>
cloc is a command line program that takes file, directory, and/or archive
names as inputs.
Here's an example of running cloc against
the Perl v5.10.0 source distribution:
</p>

<pre> =20
<i>prompt&gt;</i> cloc perl-5.10.0.tar.gz
    4076 text files.
    3883 unique files.                                         =20
    1521 files ignored.

http://cloc.sourceforge.net v 1.50  T=3D12.0 s (209.2 files/s, 70472.1 line=
s/s)
---------------------------------------------------------------------------=
----
Language                     files          blank        comment           =
code
---------------------------------------------------------------------------=
----
Perl                          2052         110356         130018         29=
2281
C                              135          18718          22862         14=
0483
C/C++ Header                   147           7650          12093          4=
4042
Bourne Shell                   116           3402           5789          3=
6882
Lisp                             1            684           2242           =
7515
make                             7            498            473           =
2044
C++                             10            312            277           =
2000
XML                             26            231              0           =
1972
yacc                             2            128             97           =
1549
YAML                             2              2              0           =
 489
DOS Batch                       11             85             50           =
 322
HTML                             1             19              2           =
  98
---------------------------------------------------------------------------=
----
SUM:                          2510         142085         173903         52=
9677
---------------------------------------------------------------------------=
----

</pre>
<p>
To run cloc on Windows computers, one must first open up a command
(aka DOS) window and invoke cloc.exe from the command line there.
</p>
<!--
<p>
The untar command in the above example is actually unnecessary as cloc=20
can be told to work
directly with compressed files.  See the=20
<a href=3D'#compressed_arch'>Advanced Use</a>
section for details.
-->

<p></p>
<!-- 1}}} -->
<!-- Options {{{1 -->=20
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"Options">Options <img alt=3D"^" src=
=3D"http://cloc.sourceforge.net/up.gif"></a></h1>

<pre> =20
<i>prompt&gt;</i> cloc

Usage: cloc [options] &lt;file(s)/dir(s)&gt; | &lt;set 1&gt; &lt;set 2&gt; =
| &lt;report files&gt;

 Count, or compute differences of, physical lines of source code in the
 given files (may be archives such as compressed tarballs or zip files)
 and/or recursively below the given directories.

 Input Options
   --extract-with=3D&lt;cmd&gt;      This option is only needed if cloc is =
unable
                             to figure out how to extract the contents of
                             the input file(s) by itself.
                             Use &lt;cmd&gt; to extract binary archive file=
s (e.g.:
                             .tar.gz, .zip, .Z).  Use the literal '&gt;FILE=
&lt;' as
                             a stand-in for the actual file(s) to be
                             extracted.  For example, to count lines of cod=
e
                             in the input files
                                gcc-4.2.tar.gz  perl-5.8.8.tar.gz
                             on Unix use
                               --extract-with=3D'gzip -dc &gt;FILE&lt; | ta=
r xf -'
                             or, if you have GNU tar,
                               --extract-with=3D'tar zxf &gt;FILE&lt;'
                             and on Windows use, for example:
                               --extract-with=3D"\"c:\Program Files\WinZip\=
WinZip32.exe\" -e -o &gt;FILE&lt; ."
                             (if WinZip is installed there).
   --list-file=3D&lt;file&gt;        Take the list of file and/or directory=
 names to
                             process from &lt;file&gt;, which has one file/=
directory
                             name per line.  Only exact matches are counted=
;
                             relative path names will be resolved starting =
from=20
                             the directory where cloc is invoked. =20
                             See also --exclude-list-file.
   --unicode                 Check binary files to see if they contain Unic=
ode
                             expanded ASCII text.  This causes performance =
to
                             drop noticably.

 Processing Options
   --autoconf                Count .in files (as processed by GNU autoconf)=
 of
                             recognized languages.
   --by-file                 Report results for every source file encounter=
ed.
   --by-file-by-lang         Report results for every source file encounter=
ed
                             in addition to reporting by language.
   --count-and-diff &lt;set1&gt; &lt;set2&gt;   =20
                             First perform direct code counts of source fil=
e(s)
                             of &lt;set1&gt; and &lt;set2&gt; separately, t=
hen perform a diff=20
                             of these.  Inputs may be pairs of files, direc=
tories,=20
                             or archives.  See also --diff, --diff-alignmen=
t,
                             --diff-timeout, --ignore-case, --ignore-whites=
pace.
   --diff &lt;set1&gt; &lt;set2&gt;      Compute differences in code and co=
mments between
                             source file(s) of &lt;set1&gt; and &lt;set2&gt=
;.  The inputs
                             may be pairs of files, directories, or archive=
s.
                             Use --diff-alignment to generate a list showin=
g
                             which file pairs where compared.  See also
                             --count-and-diff, --diff-alignment, --diff-tim=
eout,=20
                             --ignore-case, --ignore-whitespace.
   --diff-timeout &lt;N&gt;        Ignore files which take more than &lt;N&=
gt; seconds
                             to process.  Default is 10 seconds.
                             (Large files with many repeated lines can caus=
e=20
                             Algorithm::Diff::sdiff() to take hours.)
   --follow-links            [Unix only] Follow symbolic links to directori=
es
                             (sym links to files are always followed).
   --force-lang=3D&lt;lang&gt;[,&lt;ext&gt;]
                             Process all files that have a &lt;ext&gt; exte=
nsion
                             with the counter for language &lt;lang&gt;.  F=
or
                             example, to count all .f files with the
                             Fortran 90 counter (which expects files to
                             end with .f90) instead of the default Fortran =
77
                             counter, use
                               --force-lang=3D"Fortran 90",f
                             If &lt;ext&gt; is omitted, every file will be =
counted
                             with the &lt;lang&gt; counter.  This option ca=
n be
                             specified multiple times (but that is only
                             useful when &lt;ext&gt; is given each time).
                             See also --script-lang, --lang-no-ext.
   --force-lang-def=3D&lt;file&gt;   Load language processing filters from =
&lt;file&gt;,
                             then use these filters instead of the built-in
                             filters.  Note:  languages which map to the sa=
me=20
                             file extension (for example:
                             MATLAB/Objective C/MUMPS/Mercury;  Pascal/PHP;=
=20
                             Lisp/OpenCL; Lisp/Julia; Perl/Prolog) will be=
=20
                             ignored as these require additional processing=
=20
                             that is not expressed in language definition=
=20
                             files.  Use --read-lang-def to define new=20
                             language filters without replacing built-in=20
                             filters (see also --write-lang-def).
   --ignore-whitespace       Ignore horizontal white space when comparing f=
iles
                             with --diff.  See also --ignore-case.
   --ignore-case             Ignore changes in case; consider upper- and lo=
wer-
                             case letters equivalent when comparing files w=
ith
                             --diff.  See also --ignore-whitespace.
   --lang-no-ext=3D&lt;lang&gt;      Count files without extensions using t=
he &lt;lang&gt;
                             counter.  This option overrides internal logic
                             for files without extensions (where such files
                             are checked against known scripting languages
                             by examining the first line for #!).  See also
                             --force-lang, --script-lang.
   --max-file-size=3D&lt;MB&gt;      Skip files larger than &lt;MB&gt; mega=
bytes when
                             traversing directories.  By default, &lt;MB&gt=
;=3D100.
                             cloc's memory requirement is roughly twenty ti=
mes=20
                             larger than the largest file so running with=
=20
                             files larger than 100 MB on a computer with le=
ss=20
                             than 2 GB of memory will cause problems. =20
                             Note:  this check does not apply to files=20
                             explicitly passed as command line arguments.
   --read-binary-files       Process binary files in addition to text files=
.
                             This is usually a bad idea and should only be
                             attempted with text files that have embedded
                             binary data.
   --read-lang-def=3D&lt;file&gt;    Load new language processing filters f=
rom &lt;file&gt;
                             and merge them with those already known to clo=
c. =20
                             If &lt;file&gt; defines a language cloc alread=
y knows=20
                             about, cloc's definition will take precedence.=
 =20
                             Use --force-lang-def to over-ride cloc's=20
                             definitions (see also --write-lang-def ).
   --script-lang=3D&lt;lang&gt;,&lt;s&gt;  Process all files that invoke &l=
t;s&gt; as a #!
                             scripting language with the counter for langua=
ge
                             &lt;lang&gt;.  For example, files that begin w=
ith
                                #!/usr/local/bin/perl5.8.8
                             will be counted with the Perl counter by using
                                --script-lang=3DPerl,perl5.8.8
                             The language name is case insensitive but the
                             name of the script language executable, &lt;s&=
gt;,
                             must have the right case.  This option can be
                             specified multiple times.  See also --force-la=
ng,
                             --lang-no-ext.
   --sdir=3D&lt;dir&gt;              Use &lt;dir&gt; as the scratch directo=
ry instead of
                             letting File::Temp chose the location.  Files
                             written to this location are not removed at
                             the end of the run (as they are with File::Tem=
p).
   --skip-uniqueness         Skip the file uniqueness check.  This will giv=
e
                             a performance boost at the expense of counting
                             files with identical contents multiple times
                             (if such duplicates exist).
   --stdin-name=3D&lt;file&gt;       Give a file name to use to determine t=
he language
                             for standard input.
   --strip-comments=3D&lt;ext&gt;    For each file processed, write to the =
current
                             directory a version of the file which has blan=
k
                             lines and comments removed.  The name of each
                             stripped file is the original file name with
                             .&lt;ext&gt; appended to it.  It is written to=
 the
                             current directory unless --original-dir is on.
   --original-dir            [Only effective in combination with
                             --strip-comments]  Write the stripped files
                             to the same directory as the original files.
   --sum-reports             Input arguments are report files previously
                             created with the --report-file option.  Makes
                             a cumulative set of results containing the
                             sum of data from the individual report files.
   --unix                    Override the operating system autodetection
                             logic and run in UNIX mode.  See also
                             --windows, --show-os.
   --windows                 Override the operating system autodetection
                             logic and run in Microsoft Windows mode.
                             See also --unix, --show-os.

 Filter Options
   --exclude-dir=3D&lt;D1&gt;[,D2,]  Exclude the given comma separated dire=
ctories
                             D1, D2, D3, et cetera, from being scanned.  Fo=
r
                             example  --exclude-dir=3D.cache,test  will ski=
p
                             all files that have /.cache/ or /test/ as part
                             of their path.
                             Directories named .bzr, .cvs, .hg, .git, and
                             .svn are always excluded.
   --exclude-ext=3D&lt;ext1&gt;[,&lt;ext2&gt;[...]]
                             Do not count files having the given file name
                             extensions.
   --exclude-lang=3D&lt;L1&gt;[,L2,] Exclude the given comma separated lang=
uages
                             L1, L2, L3, et cetera, from being counted.
   --exclude-list-file=3D&lt;file&gt;  Ignore files and/or directories whos=
e names
                             appear in &lt;file&gt;.  &lt;file&gt; should h=
ave one file
                             name per line.  Only exact matches are ignored=
;
                             relative path names will be resolved starting =
from=20
                             the directory where cloc is invoked. =20
                             See also --list-file.
   --include-lang=3D&lt;L1&gt;[,L2,] Count only the given comma separated l=
anguages
                             L1, L2, L3, et cetera.
   --match-d=3D&lt;regex&gt;         Only count files in directories matchi=
ng the Perl
                             regex.  For example
                               --match-d=3D'/(src|include)/'
                             only counts files in directories containing
                             /src/ or /include/.
   --not-match-d=3D&lt;regex&gt;     Count all files except those in direct=
ories
                             matching the Perl regex.
   --match-f=3D&lt;regex&gt;         Only count files whose basenames match=
 the Perl
                             regex.  For example
                               --match-f=3D'^[Ww]idget'
                             only counts files that start with Widget or wi=
dget.
   --not-match-f=3D&lt;regex&gt;     Count all files except those whose bas=
enames
                             match the Perl regex.
   --skip-archive=3D&lt;regex&gt;    Ignore files that end with the given P=
erl regular
                             expression.  For example, if given
                               --skip-archive=3D'(zip|tar(.(gz|Z|bz2|xz|7z)=
)?)'
                             the code will skip files that end with .zip,
                             .tar, .tar.gz, .tar.Z, .tar.bz2, .tar.xz, and
                             .tar.7z.
   --skip-win-hidden         On Windows, ignore hidden files.

 Debug Options
   --categorized=3D&lt;file&gt;      Save names of categorized files to &lt=
;file&gt;.
   --counted=3D&lt;file&gt;          Save names of processed source files t=
o &lt;file&gt;.
   --explain=3D&lt;lang&gt;          Print the filters used to remove comme=
nts for
                             language &lt;lang&gt; and exit.  In some cases=
 the=20
                             filters refer to Perl subroutines rather than
                             regular expressions.  An examination of the
                             source code may be needed for further explanat=
ion.
   --diff-alignment=3D&lt;file&gt;   Write to &lt;file&gt; a list of files =
and file pairs
                             showing which files were added, removed, and/o=
r
                             compared during a run with --diff.  This switc=
h
                             forces the --diff mode on.
   --help                    Print this usage information and exit.
   --found=3D&lt;file&gt;            Save names of every file found to &lt;=
file&gt;.
   --ignored=3D&lt;file&gt;          Save names of ignored files and the re=
ason they
                             were ignored to &lt;file&gt;.
   --print-filter-stages     Print processed source code before and after=
=20
                             each filter is applied.
   --show-ext[=3D&lt;ext&gt;]        Print information about all known (or =
just the
                             given) file extensions and exit.
   --show-lang[=3D&lt;lang&gt;]      Print information about all known (or =
just the
                             given) languages and exit.
   --show-os                 Print the value of the operating system mode
                             and exit.  See also --unix, --windows.
   -v[=3D&lt;n&gt;]                  Verbose switch (optional numeric value=
).
   --version                 Print the version of this program and exit.
   --write-lang-def=3D&lt;file&gt;   Writes to &lt;file&gt; the language pr=
ocessing filters
                             then exits.  Useful as a first step to creatin=
g
                             custom language definitions (see also
                             --force-lang-def, --read-lang-def).

 Output Options
   --3                       Print third-generation language output.
                             (This option can cause report summation to fai=
l
                             if some reports were produced with this option
                             while others were produced without it.)
   --by-percent  X           Instead of comment and blank line counts, show=
=20
                             these values as percentages based on the value=
=20
                             of X in the denominator:
                                X =3D 'c'   -&gt; # lines of code
                                X =3D 'cm'  -&gt; # lines of code + comment=
s
                                X =3D 'cb'  -&gt; # lines of code + blanks
                                X =3D 'cmb' -&gt; # lines of code + comment=
s + blanks
                             For example, if using method 'c' and your code
                             has twice as many lines of comments as lines=
=20
                             of code, the value in the comment column will=
=20
                             be 200%.  The code column remains a line count=
.
   --csv                     Write the results as comma separated values.
   --csv-delimiter=3D&lt;C&gt;       Use the character &lt;C&gt; as the del=
imiter for comma
                             separated files instead of ,.  This switch for=
ces
   --out=3D&lt;file&gt;              Synonym for --report-file=3D&lt;file&g=
t;.
                             --csv to be on.
   --progress-rate=3D&lt;n&gt;       Show progress update after every &lt;n=
&gt; files are
                             processed (default &lt;n&gt;=3D100).  Set &lt;=
n&gt; to 0 to
                             suppress progress output (useful when redirect=
ing
                             output to STDOUT).
   --quiet                   Suppress all information messages except for
                             the final report.
   --report-file=3D&lt;file&gt;      Write the results to &lt;file&gt; inst=
ead of STDOUT.
   --sql=3D&lt;file&gt;              Write results as SQL create and insert=
 statements
                             which can be read by a database program such a=
s
                             SQLite.  If &lt;file&gt; is -, output is sent =
to STDOUT.
   --sql-append              Append SQL insert statements to the file speci=
fied
                             by --sql and do not generate table creation
                             statements.  Only valid with the --sql option.
   --sql-project=3D&lt;name&gt;      Use &lt;name&gt; as the project identi=
fier for the
                             current run.  Only valid with the --sql option=
.
   --sql-style=3D&lt;style&gt;       Write SQL statements in the given styl=
e instead
                             of the default SQLite format.  Currently, the=
=20
                             only style option is Oracle.
   --sum-one                 For plain text reports, show the SUM: output l=
ine
                             even if only one input file is processed.
   --xml                     Write the results in XML.
   --xsl=3D&lt;file&gt;              Reference &lt;file&gt; as an XSL style=
sheet within
                             the XML output.  If &lt;file&gt; is 1 (numeric=
 one),
                             writes a default stylesheet, cloc.xsl (or
                             cloc-diff.xsl if --diff is also given).
                             This switch forces --xml on.
   --yaml                    Write the results in YAML.

</pre>
<!-- 1}}} -->
<!-- Recognized Languages {{{1 -->=20
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"Languages">Recognized Languages <img =
alt=3D"^" src=3D"http://cloc.sourceforge.net/up.gif"></a></h1>
<pre><i>prompt&gt;</i> cloc --show-lang

ABAP                       (abap)
ActionScript               (as)
Ada                        (ada, adb, ads, pad)
ADSO/IDSM                  (adso)
AMPLE                      (ample, dofile, startup)
Ant                        (build.xml)
Apex Trigger               (trigger)
Arduino Sketch             (ino, pde)
ASP                        (asa, asp)
ASP.Net                    (asax, ascx, asmx, aspx, config, master, sitemap=
, webinfo)
Assembly                   (asm, s, S)
AutoHotkey                 (ahk)
awk                        (awk)
Bourne Again Shell         (bash)
Bourne Shell               (sh)
C                          (c, ec, pgc)
C Shell                    (csh, tcsh)
C#                         (cs)
C++                        (C, c++, cc, cpp, cxx, pcc)
C/C++ Header               (h, H, hh, hpp)
CCS                        (ccs)
Clojure                    (clj)
ClojureScript              (cljs)
CMake                      (cmake, CMakeLists.txt)
COBOL                      (cbl, CBL, cob, COB)
CoffeeScript               (coffee)
ColdFusion                 (cfm)
ColdFusion CFScript        (cfc)
CSS                        (css)
CUDA                       (cu)
Cython                     (pyx)
D/dtrace                   (d)
DAL                        (da)
Dart                       (dart)
diff                       (diff)
DITA                       (dita)
DOS Batch                  (bat, BAT, btm, BTM, cmd, CMD)
DTD                        (dtd)
ECPP                       (ecpp)
Elixir                     (ex, exs)
ERB                        (ERB, erb)
Erlang                     (erl, hrl)
Expect                     (exp)
F#                         (fs, fsi)
Focus                      (focexec)
Fortran 77                 (f, F, f77, F77, for, FOR, FTN, ftn, pfo)
Fortran 90                 (f90, F90)
Fortran 95                 (f95, F95)
Go                         (go)
Grails                     (gsp)
Groovy                     (gant, gradle, groovy)
Haml                       (haml)
Handlebars                 (handlebars, hbs)
Harbour                    (hb)
Haskell                    (hs, lhs)
HLSL                       (cg, cginc, shader)
HTML                       (htm, html)
IDL                        (idl)
IDL/Qt Project/Prolog      (pro)
InstallShield              (ism)
Java                       (java)
Javascript                 (js)
JavaServer Faces           (jsf, xhtml)
JCL                        (jcl)
JSON                       (json)
JSP                        (jsp, jspf)
Kermit                     (ksc)
Korn Shell                 (ksh)
Kotlin                     (kt)
LESS                       (less)
lex                        (l)
Lisp                       (el, lisp, lsp, sc)
Lisp/Julia                 (jl)
Lisp/OpenCL                (cl)
LiveLink OScript           (oscript)
Lua                        (lua)
m4                         (ac, m4)
make                       (am, gnumakefile, Gnumakefile, makefile, Makefil=
e)
MATLAB                     (m)
Maven                      (pom, pom.xml)
Modula3                    (i3, ig, m3, mg)
MSBuild script             (csproj, vbproj, vcproj, wdproj, wixproj)
MUMPS                      (mps, m)
Mustache                   (mustache)
MXML                       (mxml)
NAnt script                (build)
NASTRAN DMAP               (dmap)
Objective C                (m)
Objective C++              (mm)
OCaml                      (ml, mli, mll, mly)
Oracle Forms               (fmt)
Oracle Reports             (rex)
Pascal                     (dpr, p, pas)
Pascal/Puppet              (pp)
Patran Command Language    (pcl, ses)
Perl                       (perl, plh, plx, pm)
Perl/Prolog                (PL, pl)
PHP                        (php, php3, php4, php5)
PHP/Pascal                 (inc)
Pig Latin                  (pig)
PL/I                       (pl1)
PowerShell                 (ps1)
Prolog                     (P)
Protocol Buffers           (proto)
PureScript                 (purs)
Python                     (py)
QML                        (qml)
R                          (R)
Racket                     (rkt, rktl, sch, scm, scrbl, ss)
Razor                      (cshtml)
Rexx                       (rexx)
RobotFramework             (robot, tsv)
Ruby                       (rake, rb)
Ruby HTML                  (rhtml)
Rust                       (rs)
SAS                        (sas)
SASS                       (sass, scss)
Scala                      (scala)
sed                        (sed)
SKILL                      (il)
SKILL++                    (ils)
Smarty                     (smarty, tpl)
Softbridge Basic           (sbl, SBL)
SQL                        (psql, sql, SQL)
SQL Data                   (data.sql)
SQL Stored Procedure       (spc.sql, spoc.sql, sproc.sql, udf.sql)
Standard ML                (fun, sig, sml)
Swift                      (swift)
Tcl/Tk                     (itk, tcl, tk)
Teamcenter met             (met)
Teamcenter mth             (mth)
Titanium Style Sheet       (tss)
TypeScript                 (ts)
Unity-Prefab               (mat, prefab)
Vala                       (vala)
Vala Header                (vapi)
Velocity Template Language (vm)
Verilog-SystemVerilog      (sv, svh, v)
VHDL                       (VHD, vhd, vhdl, VHDL)
vim script                 (vim)
Visual Basic               (bas, cls, ctl, dsr, frm, VB, vb, VBA, vba, vbs,=
 VBS)
Visual Fox Pro             (sca, SCA)
Visualforce Component      (component)
Visualforce Page           (page)
Windows Message File       (mc)
Windows Module Definition  (def)
Windows Resource File      (rc, rc2)
WiX include                (wxi)
WiX source                 (wxs)
WiX string localization    (wxl)
XAML                       (xaml)
xBase                      (prg)
xBase Header               (ch)
XML                        (XML, xml)
XQuery                     (xq, xquery)
XSD                        (xsd, XSD)
XSLT                       (xsl, XSL, xslt, XSLT)
yacc                       (y)
YAML                       (yaml, yml)
</pre>
<p>
The above list can be customized by reading language definitions
from a file with the=20
<code>--read-lang-def</code>=20
or
<code>--force-lang-def</code>=20
options.
</p>
<a name=3D"extcollision"></a>
<p>
Eight file extensions have multiple language mappings:
</p><ul>
<li>  <code>.cl</code> files could be Lisp or OpenCL </li>
<li>  <code>.inc</code> files could be PHP or Pascal </li>
<li>  <code>.jl</code> files could be Lisp or Julia</li>
<li>  <code>.m</code> files could be MATLAB, Mercury, MUMPS, or Objective C=
 </li>
<li>  <code>.p</code> files could be D or dtrace</li>
<li>  <code>.pl</code> files could be Perl or Prolog</li>
<li>  <code>.pp</code> files could be Pascal or Puppet</li>
<li>  <code>.pro</code> files could be IDL, Prolog, or a Qt Project</li>
</ul>
cloc has subroutines=20
that attempt to identify the correct language
based on the file's contents for these special cases.  Language identificat=
ion
accuracy is a function of how much code the file contains; <tt>.m</tt>
files with just one or two lines for example, seldom have enough
information to correctly distinguish between MATLAB, Mercury,
MUMPS, or Objective C.
<p>
Languages with file extension collisions are difficult to
customize with <tt>--read-lang-def</tt> or
<tt>--force-lang-def</tt> as they have no mechanism=20
to identify languages with common extensions.  In this
situation one must modify the cloc source code.
</p>

<!-- 1}}} -->
<!-- How it Works {{{1 -->=20
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"How_it_works">How it Works <img alt=
=3D"^" src=3D"http://cloc.sourceforge.net/up.gif"></a></h1>
<p>
cloc's method of operation resembles SLOCCount's:  First, create
a list of files to consider.  Next, attempt to determine whether or not
found files contain recognized computer language source code.  Finally,=20
for files identified as source files, invoke language-specific routines
to count the number of source lines. =20
</p>
<p>
A more detailed description:
</p><ol>
<li> If the input file is an archive (such as a <tt>.tar.gz</tt> or=20
     <tt>.zip</tt> file), create a temporary directory and expand the=20
     archive there
     using a system call to an appropriate underlying utility (<tt>tar</tt>=
,
     <tt>bzip2</tt>, <tt>unzip</tt>, etc) then add this temporary directory
     as one of the inputs.  (This works more reliably on Unix than on
     Windows.)
</li><li> Use File::Find to recursively descend the input directories and=
=20
     make a list of candidate file names.  Ignore binary and zero-sized fil=
es.
</li><li> Make sure the files in the candidate list have unique contents
     (first by comparing file sizes, then, for similarly sized files,
     compare MD5 hashes of the file contents with Digest::MD5).
     For each set of identical files, remove all but the first copy,
     as determined by a lexical sort, of identical files from the set.=20
     The removed files are not included in the report.
     (The <tt>--skip-uniqueness</tt> switch disables the uniqueness
     tests and forces all copies of files to be included in the report.)
     See also the <tt>--ignored=3D</tt> switch to see which files
     were ignored and why.
</li><li> Scan the candidate file list for=20
     file extensions which cloc associates with programming languages=20
     (see the <code><a href=3D"http://cloc.sourceforge.net/#Languages">--sh=
ow-lang</a></code>
     and <code>--show-ext</code> options).  Files which match are
     classified as containing source code for that language. =20
     Each file without an extensions is opened and its first=20
     line read to see
     if it is a Unix shell script (anything that begins with <code>#!</code=
>).
     If it is shell script, the file is classified by that scripting
     language (if the language is recognized).  If the file does not
     have a recognized extension or is not a recognzied
     scripting language, the file is ignored.
</li><li> All remaining files in the candidate list should now be source
     files for known programming languages.  For each of these files:
    <ol>
    <li>  Read the entire file into memory.
    </li><li>  Count the number of lines (=3D L<sub>original</sub>).
    </li><li>  Remove blank lines, then count again (=3D L<sub>non_blank</s=
ub>).
    </li><li>  Loop over the <i>comment filters</i> defined for
          this language.  (For example, C++ has two filters: =20
          (1) remove lines that start with optional whitespace
          followed by <code>//</code>  and=20
          (2) remove text between <code>/*</code> and <code>*/</code>)
          Apply each filter to the code to remove comments. =20
          Count the left over lines (=3D L<sub>code</sub>).
    </li><li>  Save the counts for this language:<br>
          blank lines =3D L<sub>original</sub> - L<sub>non_blank</sub><br>
          comment lines =3D L<sub>non_blank</sub> - L<sub>code</sub><br>
          code lines =3D L<sub>code</sub>
    </li></ol>
</li></ol>
<p></p>
<p>
The options modify the algorithm slightly.  The
<code>--read-lang-def</code> option for example allows the user to
read definitions of comment filters, known file extensions, and known
scripting languages from a file.  The code for this option is processed
between Steps 2 and 3.
</p>
<!-- 1}}} -->
<!-- Advanced Use {{{1 -->=20
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"Advanced_Use">Advanced Use <img alt=
=3D"^" src=3D"http://cloc.sourceforge.net/up.gif"></a></h1>
<p>
</p>
<!-- 1}}} -->
<!--   Remove Comments from Source Code {{{1 -->=20
<h2><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"strip_comments">Remove Comments from =
Source Code<img alt=3D"^" src=3D"http://cloc.sourceforge.net/up.gif"></a></=
h2>
<p>
How can you tell if cloc correctly identifies comments?
One way to convince yourself cloc is doing the right thing is to=20
use its <tt>--strip-comments</tt> option to
remove comments and blank lines from files, then compare the=20
stripped-down files to originals. =20
</p>
Let's try this out with the SQLite=20
<a href=3D"http://www.sqlite.org/cvstrac/wiki?p=3DTheAmalgamation">amalgama=
tion</a>,
a C file containing all code needed to build the SQLite library along
with a header file:
<pre><i>prompt</i>&gt; tar zxf sqlite-amalgamation-3.5.6.tar.gz=20
<i>prompt</i>&gt; cd sqlite-3.5.6/
<i>prompt</i>&gt; cloc --strip-comments=3Dnc sqlite.c
       1 text file.
       1 unique file.                             =20
Wrote sqlite3.c.nc
       0 files ignored.

http://cloc.sourceforge.net v 1.03  T=3D1.0 s (1.0 files/s, 82895.0 lines/s=
)
---------------------------------------------------------------------------=
----
Language          files     blank   comment      code    scale   3rd gen. e=
quiv
---------------------------------------------------------------------------=
----
C                     1      5167     26827     50901 x   0.77 =3D       39=
193.77
---------------------------------------------------------------------------=
----
</pre>

<p>
The extention argument given to <tt>--strip-comments</tt> is arbitrary;
here <tt>nc</tt> was used as an abbreviation for "no comments".
</p>
<p>
cloc removed over 31,000 lines from the file:
</p>
<pre><i>prompt</i>&gt; wc -l sqlite3.c sqlite3.c.nc=20
  82895 sqlite3.c
  50901 sqlite3.c.nc
 133796 total
<i>prompt</i>&gt; echo "82895 - 50901" | bc
31994
</pre>

<p>
We can now compare the orignial file,
<tt>sqlite3.c</tt> and the one stripped of comments,
<tt>sqlite3.c.nc</tt> with tools like diff or vimdiff and see
what exactly cloc considered comments and blank lines.
A rigorous proof that the stripped-down file contains the same C code
as the original is to compile these files and compare checksums of the
resulting object files.
</p>

<p>
First, the original source file:
</p>
<pre><i>prompt</i>&gt; gcc -c sqlite3.c
<i>prompt</i>&gt; md5sum sqlite3.o
cce5f1a2ea27c7e44b2e1047e2588b49  sqlite3.o
</pre>
<p>
Next, the version without comments:
</p>
<pre><i>prompt</i>&gt; mv sqlite3.c.nc sqlite3.c
<i>prompt</i>&gt; gcc -c sqlite3.c
<i>prompt</i>&gt; md5sum sqlite3.o
cce5f1a2ea27c7e44b2e1047e2588b49  sqlite3.o
</pre>
cloc removed over 31,000 lines of comments and blanks but did not modify
the source code in any significant way since the resulting object file
matches the original.
<!-- 1}}} -->
<!--   Work with Compressed Archives {{{1 -->=20
<h2><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"compressed_arch">Work with Compressed=
 Archives <img alt=3D"^" src=3D"http://cloc.sourceforge.net/up.gif"></a></h=
2>
<p>
Versions of cloc before v1.07 required an
 <code>--extract-with=3D<i>&lt;cmd&gt;</i></code> option to tell cloc how
to expand an archive file.  Beginning with v1.07 this is extraction is
attempted automatically.  At the moment the automatic extraction method wor=
ks
reasonably well on Unix-type OS's for the following file types:
<tt>.tar.gz</tt>,
<tt>.tar.bz2</tt>,
<tt>.tgz</tt>,
<tt>.zip</tt>,
<tt>.ear</tt>.
Some of these extensions work on Windows if one has WinZip installed
in the default location (<tt>C:\Program Files\WinZip\WinZip32.exe</tt>).
Additionally, with newer versions of WinZip, the=20
<a href=3D"http://www.winzip.com/downcl.htm">command line add-on</a>
is needed for correct operation; in this case one would invoke cloc with
something like<br>
<code>
 --extract-with=3D"\"c:\Program Files\WinZip\wzunzip\" -e -o &gt;FILE&lt; .=
"
 </code> (ref. <a href=3D"http://sourceforge.net/projects/cloc/forums/forum=
/600963/topic/4021070?message=3D8938196">forum post</a>).
</p>
<p>
In situations where the automatic extraction fails, one can try the=20
<code>--extract-with=3D<i>&lt;cmd&gt;</i></code>
option to count lines of code within tar files, Zip files, or
other compressed archives for which one has an extraction tool.
cloc takes the user-provided extraction command and expands the archive
to a temporary directory (created with File::Temp),=20
counts the lines of code in the temporary directory,
then removes that directory.  While not especially helpful when dealing
with a single compressed archive (after all, if you're going to type
the extraction command anyway why not just manually expand the archive?)
this option is handy for working with several archives at once.
</p>
<p>
For example, say you have the following source tarballs on a Unix machine<b=
r>
&nbsp;&nbsp;  &nbsp; <code>perl-5.8.5.tar.gz</code><br>
&nbsp;&nbsp;  &nbsp; <code>Python-2.4.2.tar.gz</code><br>
and you want to count all the code within them.  The command would be
</p>
<pre>cloc --extract-with=3D'gzip -dc &gt;FILE&lt; | tar xf -' perl-5.8.5.ta=
r.gz Python-2.4.2.tar.gz
</pre>
If that Unix machine has GNU tar (which can uncompress and extract in one s=
tep) the command can be shortened to
<pre>cloc --extract-with=3D'tar zxf &gt;FILE&lt;' perl-5.8.5.tar.gz Python-=
2.4.2.tar.gz
</pre>
On a Windows computer with WinZip installed in <code>c:\Program Files\WinZi=
p</code> the command would look like
<pre>cloc.exe --extract-with=3D"\"c:\Program Files\WinZip\WinZip32.exe\" -e=
 -o &gt;FILE&lt; ." perl-5.8.5.tar.gz Python-2.4.2.tar.gz
</pre>
Java <code>.ear</code> files are Zip files that contain additional Zip=20
files.  cloc can handle nested compressed archives without=20
difficulty--provided all such files are compressed and archived in the=20
same way.  Examples of counting a
Java <code>.ear</code> file in Unix and Windows:
<pre><i>Unix&gt;</i> cloc --extract-with=3D"unzip -d . &gt;FILE&lt; " Proje=
ct.ear

<i>DOS&gt;</i> cloc.exe --extract-with=3D"\"c:\Program Files\WinZip\WinZip3=
2.exe\" -e -o &gt;FILE&lt; ." Project.ear
</pre>
<!-- 1}}} -->
<!--   Differences {{{1 -->=20
<h2><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"diff">Differences<img alt=3D"^" src=
=3D"http://cloc.sourceforge.net/up.gif"></a></h2>
<p>
The <tt>--diff</tt> switch allows one to measure the relative change in
source code and comments between two versions of a file, directory,
or archive.  Differences reveal much more than absolute code
counts of two file versions.  For example, say a source file
has 100 lines and its developer delivers a newer version with
102 lines.  Did he add two comment lines, or delete seventeen source
lines and add fourteen source lines and five comment lines, or did he
do a complete rewrite, discarding all 100 original lines and
adding 102 lines of all new source?  The diff option tells how
many lines of source were added, removed, modified or stayed
the same, and how many lines of comments were added, removed,
modified or stayed the same.
</p>
<p>
In addition to file pairs, one can give cloc pairs of
directories, or pairs of file archives, or a file archive
and a directory.  cloc will try to align=20
file pairs within the directories or archives and compare diffs
for each pair.  For example, to see what changed between
GCC 4.4.0 and 4.5.0 one could do
</p><pre>  cloc --diff gcc-4.4.0.tar.bz2  gcc-4.5.0.tar.bz2
</pre>

Be prepared to wait a while for the results though; the <tt>--diff</tt>
option runs much more slowly than an absolute code count.
<p></p>
<p>
To see how cloc aligns files between the two archives, use the
<tt>--diff-alignment</tt> option

</p><pre>  cloc --diff-aligment=3Dalign.txt gcc-4.4.0.tar.bz2  gcc-4.5.0.ta=
r.bz2
</pre>

to produce the file <tt>align.txt</tt> which shows the file pairs as well
as files added and deleted.  The symbols =3D=3D and !=3D before each
file pair indicate if the files are identical (=3D=3D)
or if they have different content (!=3D).
<p></p>
<p>
Here's sample output showing the difference between the Python 2.6.6 and 2.=
7
releases:
</p><pre><i>prompt&gt;</i> cloc --diff  Python-2.6.6.tar.bz2 Python-2.7.tar=
.bz2
      3870 text files.
      4130 text files.s
      2177 files ignored.                                        =20
 =20
  2 errors:
  Diff error (quoted comments?):  /tmp/4QAqkrHN7Z/Python-2.6.6/Mac/Modules/=
qd/qdsupport.py
  Diff error (quoted comments?):  /tmp/LvStB1lQxd/Python-2.7/Mac/Modules/qd=
/qdsupport.py
 =20
  http://cloc.sourceforge.net v 1.52  T=3D422.0 s (0.0 files/s, 0.0 lines/s=
)
  -------------------------------------------------------------------------=
------
  Language                     files          blank        comment         =
  code
  -------------------------------------------------------------------------=
------
  vim script
   same                            0              0              7         =
    85
   modified                        1              0              0         =
    20
   added                           0              0              0         =
     1
   removed                         0              0              0         =
     0
  Expect
   same                            1              0              0         =
    60
   modified                        0              0              0         =
     0
   added                           6              0              0         =
     0
   removed                         0              0              0         =
     0
  CSS
   same                            1              0             19         =
   318
   modified                        0              0              0         =
     0
   added                           0              0              0         =
     0
   removed                         0              0              0         =
     0
  XML
   same                            1              0              0         =
     4
   modified                        0              0              0         =
     0
   added                           3              0              0         =
     0
   removed                         1              0              0         =
     0
  m4
   same                            1              0             19         =
  1089
   modified                        2              0              0         =
   130
   added                           5              6              5         =
   150
   removed                         0            660             15         =
  5905
  Visual Basic
   same                            2              0              1         =
    12
   modified                        0              0              0         =
     0
   added                           0              0              0         =
     0
   removed                         0              0              0         =
     0
  Lisp
   same                            1              0            503         =
  2933
   modified                        0              0              0         =
     0
   added                           0              0              0         =
     0
   removed                         0              0              0         =
     0
  NAnt scripts
   same                            2              0              0         =
    30
   modified                        0              0              0         =
     0
   added                           0              0              0         =
     0
   removed                         0              0              0         =
     0
  HTML
   same                           12              0             11         =
  2329
   modified                        2              0              0         =
     2
   added                           0              0              0         =
     0
   removed                         9              0              0         =
     0
  make
   same                            3              0            353         =
  2888
   modified                        7              0              3         =
    11
   added                           2              1              0         =
    14
   removed                         0              2              0         =
     8
  Objective C
   same                            6              0             70         =
   633
   modified                        1              0              0         =
     2
   added                           0              0              0         =
     0
   removed                         0              0              0         =
     0
  Assembly
   same                           22              0           1575         =
  9156
   modified                       14              0             78         =
   174
   added                           3            171            111         =
   998
   removed                         2              1              0         =
   189
  Bourne Shell
   same                           26              0           2828         =
 20114
   modified                        7              0            255         =
  2179
   added                           5            163           1103         =
  4770
   removed                         0            550           2444         =
 11660
  (unknown)
   same                            0              0              0         =
     0
   modified                        0              0              0         =
     0
   added                          32              0              0         =
     0
   removed                        26              0              0         =
     0
  C++
   same                            0              0              0         =
     0
   modified                        0              0              0         =
     0
   added                           2              0              0         =
     0
   removed                         0              0              0         =
     0
  Teamcenter def
   same                            6              0            158         =
   885
   modified                        2              0              0         =
     0
   added                           1              2              4         =
    17
   removed                         1              0              4         =
     2
  DOS Batch
   same                           26              0            101         =
   416
   modified                        5              0              1         =
     8
   added                           1              0              0         =
     0
   removed                         0              0              0         =
     0
  C/C++ Header
   same                          143              0           9016         =
 37452
   modified                       90              0            157         =
 15564
   added                          12            181            341         =
 10247
   removed                         1            101            129         =
  5219
  C
   same                          222              0          28753         =
322642
   modified                      157              0            542         =
  5023
   added                         141           1485           1730         =
 12440
   removed                         4            223            619         =
  4519
  Python
   same                         1211              0          92289         =
348923
   modified                      740              0           1238         =
 11589
   added                         114           2845           4645         =
 17251
   removed                        23           1409           2617         =
  6385
  -------------------------------------------------------------------------=
------
  SUM:
   same                         1686              0         135703         =
749969
   modified                     1028              0           2274         =
 34702
   added                         327           4854           7939         =
 45888
   removed                        67           2946           5828         =
 33887
  -------------------------------------------------------------------------=
------
</pre>
Note the two errors for the file=20
<tt>Python-<i>X</i>/Mac/Modules/qd/qdsupport.py</tt>.
This file has Python docstrings (text between pairs of triple quotes) that
contain C comments.  cloc treats docstrings as comments and handles them
by first converting them to C comments, then using the C comment removing
regular expression.  Nested C comments yield erroneous results however.
<p>
</p>
There's also output for the language "(unknown)".  Files in this
category are non-source files and therefore not counted; their
presence is merely noted as having been removed, added, or modified.
<p></p>
<!-- 1}}} -->
<!--   Create Custom Language Definitions {{{1 -->=20
<h2><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"custom_lang">Create Custom Language D=
efinitions <img alt=3D"^" src=3D"http://cloc.sourceforge.net/up.gif"></a></=
h2>
<p>
cloc can write its language comment definitions to a file or can read
comment definitions from a file, overriding the built-in definitions.
This can be useful when you want to use cloc to count lines of a
language not yet included, to change association of file extensions
to languages, or to modify the way existing languages are counted.
</p>
<p>
The easiest way to create a custom language definition file is to
make cloc write its definitions to a file, then modify that file:
</p><pre><i>Unix&gt;</i> cloc --write-lang-def=3Dmy_definitions.txt
</pre>
creates the file <code>my_definitions.txt</code> which can be modified
then read back in with either the <tt>--read-lang-def</tt> or=20
<tt>--force-lang-def</tt> option.  The difference between the options is
former merges language definitions from the given file in with
cloc's internal definitions with cloc'taking precedence
if there are overlaps.  The <tt>--force-lang-def</tt> option, on the
other hand, replaces cloc's definitions completely. =20
This option has a disadvantage in preventing cloc from counting=20
<a class=3D"u" href=3D"http://cloc.sourceforge.net/#extcollision" name=3D"e=
xtcollision">
languages whose extensions map to multiple languages
</a> as these languages require additional logic that is not easily
expressed in a definitions file.
<pre><i>Unix&gt;</i> cloc --read-lang-def=3Dmy_definitions.txt  <i>file1 fi=
le2 dir1 ...</i>
</pre>
<p></p>
<p>
Each language entry has four parts:
</p><ol>
    <li> The language name starting in column 1.
    </li><li> One or more comment <i>filters</i> starting in column 5.
    </li><li> One or more filename extensions starting in column 5.
    </li><li> A 3rd generation scale factor starting in column 5.  This ent=
ry must be provided
         but its value is not important
         unless you want to compare your language to a hypothetical
         third generation programming language.
</li></ol>
A filter defines a method to remove comment text from the source file.
For example the entry for C++ looks like this
<pre>C++
    filter remove_matches ^\s*//
    filter call_regexp_common C
    extension C
    extension cc
    extension cpp
    extension cxx
    extension pcc
    3rd_gen_scale 1.51
</pre>
C++ has two filters:  first, remove lines that start with optional
whitespace and are followed by <code>//</code>. =20
Next, remove all C comments.  C comments are difficult to express
as regular expressions so a call is made to Regexp::Common to get the
appropriate regular expression to match C comments which are then removed.
<p></p>
<p>
A more complete discussion of the different filter options may appear
here in the future.  The output of cloc's=20
<code>--write-lang-def</code> option should provide enough examples
for motivated individuals to modify or extend cloc's language definitions.
</p>
<!-- 1}}} -->
<!--   Combine Reports {{{1 -->=20
<h2><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"combine_reports">Combine Reports <img=
 alt=3D"^" src=3D"http://cloc.sourceforge.net/up.gif"></a></h2>
<p>
If you manage multiple software projects you might be interested in
seeing line counts by project, not just by language.
Say you manage three software projects called MySQL, PostgreSQL, and SQLite=
.
The teams responsible for each of these projects run cloc on their
source code and provide you with the output.
For example MySQL team does
</p><pre>cloc --report-file=3Dmysql-5.1.42.txt mysql-5.1.42.tar.gz
</pre>
and provides you with the file <code>mysql-5.1.42.txt</code>.
The contents of the three files you get are
<pre><i>Unix&gt;</i> cat mysql-5.1.42.txt
http://cloc.sourceforge.net v 1.50  T=3D26.0 s (108.1 files/s, 65774.5 line=
s/s)
---------------------------------------------------------------------------=
-----
Language                      files          blank        comment          =
 code
---------------------------------------------------------------------------=
-----
C++                             615          93609         110909         5=
21041
C                               642          83179          82424         3=
93602
C/C++ Header                   1065          33980          77633         1=
42779
Bourne Shell                    178          14892          11437          =
74525
Perl                             60           7634           4667          =
22703
m4                               13           1220            394          =
10497
make                            119            914           1855          =
 4447
XML                              27            564             23          =
 4107
SQL                              18            517            209          =
 3433
Assembly                         12            161              0          =
 1304
yacc                              2            167             40          =
 1048
lex                               2            332            113          =
  879
Teamcenter def                   43             85            219          =
  701
Javascript                        3             70            140          =
  427
Pascal                            2              0            436          =
  377
HTML                              1              7              0          =
  250
Bourne Again Shell                1              6              1          =
   48
DOS Batch                         8             23             73          =
   36
---------------------------------------------------------------------------=
-----
SUM:                           2811         237360         290573        11=
82204
---------------------------------------------------------------------------=
-----
<i>Unix&gt;</i> cat sqlite-3.6.22.txt
http://cloc.sourceforge.net v 1.50  T=3D3.0 s (4.7 files/s, 53833.7 lines/s=
)
---------------------------------------------------------------------------=
----
Language                     files          blank        comment           =
code
---------------------------------------------------------------------------=
----
C                                2           7459          37993          6=
8944
Bourne Shell                     7           3344           4522          2=
5849
m4                               2            754             20           =
6557
C/C++ Header                     2            155           4808           =
1077
make                             1              6              0           =
  13
---------------------------------------------------------------------------=
----
SUM:                            14          11718          47343         10=
2440
---------------------------------------------------------------------------=
----

<i>Unix&gt;</i> cat postgresql-8.4.2.txt
http://cloc.sourceforge.net v 1.50  T=3D16.0 s (129.1 files/s, 64474.9 line=
s/s)
---------------------------------------------------------------------------=
----
Language                     files          blank        comment           =
code
---------------------------------------------------------------------------=
----
C                              923         102324         167390         56=
3865
C/C++ Header                   556           9180          22723          4=
0990
Bourne Shell                    51           3692           3245          2=
8486
SQL                            260           8246           5645          2=
5862
yacc                             6           2667           2126          2=
2825
Perl                            36            782            696           =
4894
lex                              8            708           1525           =
3638
make                           180           1215           1385           =
3453
m4                              12            199             25           =
1431
Teamcenter def                  13              4              0           =
1104
HTML                             2             94              1           =
 410
DOS Batch                        7             53             22           =
 188
XSLT                             5             41             30           =
 111
Assembly                         3             17              0           =
 105
D                                1             14             14           =
  65
CSS                              1             16              7           =
  44
sed                              1              1              7           =
  15
Python                           1              5              1           =
  12
---------------------------------------------------------------------------=
----
SUM:                          2066         129258         204842         69=
7498
---------------------------------------------------------------------------=
----
</pre>
<p></p>
<p>
While these three files are interesting, you also want to see
the combined counts from all projects.
That can be done with cloc's <code>--sum_reports</code>
option:
</p><pre><i>Unix&gt;</i> cloc --sum-reports --report_file=3Ddatabases mysql=
-5.1.42.txt  postgresql-8.4.2.txt  sqlite-3.6.22.txt
Wrote databases.lang
Wrote databases.file
</pre>
The report combination produces two output files, one for sums by
programming language (<code>databases.lang</code>) and one by project=20
(<code>databases.file</code>).
Their contents are
<pre><i>Unix&gt;</i> cat databases.lang
http://cloc.sourceforge.net v 1.50
---------------------------------------------------------------------------=
-----
Language                      files          blank        comment          =
 code
---------------------------------------------------------------------------=
-----
C                              1567         192962         287807        10=
26411
C++                             615          93609         110909         5=
21041
C/C++ Header                   1623          43315         105164         1=
84846
Bourne Shell                    236          21928          19204         1=
28860
SQL                             278           8763           5854          =
29295
Perl                             96           8416           5363          =
27597
yacc                              8           2834           2166          =
23873
m4                               27           2173            439          =
18485
make                            300           2135           3240          =
 7913
lex                              10           1040           1638          =
 4517
XML                              27            564             23          =
 4107
Teamcenter def                   56             89            219          =
 1805
Assembly                         15            178              0          =
 1409
HTML                              3            101              1          =
  660
Javascript                        3             70            140          =
  427
Pascal                            2              0            436          =
  377
DOS Batch                        15             76             95          =
  224
XSLT                              5             41             30          =
  111
D                                 1             14             14          =
   65
Bourne Again Shell                1              6              1          =
   48
CSS                               1             16              7          =
   44
sed                               1              1              7          =
   15
Python                            1              5              1          =
   12
---------------------------------------------------------------------------=
-----
SUM:                           4891         378336         542758        19=
82142
---------------------------------------------------------------------------=
-----

<i>Unix&gt;</i> cat databases.file
---------------------------------------------------------------------------=
-------
Report File                     files          blank        comment        =
   code
---------------------------------------------------------------------------=
-------
mysql-5.1.42.txt                 2811         237360         290573        =
1182204
postgresql-8.4.2.txt             2066         129258         204842        =
 697498
sqlite-3.6.22.txt                  14          11718          47343        =
 102440
---------------------------------------------------------------------------=
-------
SUM:                             4891         378336         542758        =
1982142
---------------------------------------------------------------------------=
-------

</pre>
<p></p>
<p>
Report files themselves can be summed together.  Say you also manage
development of Perl and Python and you want to keep track
of those line counts separately from your database projects.  First
create reports for Perl and Python separately:
</p><pre>cloc --report-file=3Dperl-5.10.0.txt perl-5.10.0.tar.gz
cloc --report-file=3Dpython-2.6.4.txt Python-2.6.4.tar.bz2
</pre>
then sum these together with
<pre><i>Unix&gt;</i> cloc --sum-reports --report_file=3Dscript_lang perl-5.=
10.0.txt python-2.6.4.txt
Wrote script_lang.lang
Wrote script_lang.file

<i>Unix&gt;</i> cat script_lang.lang
http://cloc.sourceforge.net v 1.50
---------------------------------------------------------------------------=
----
Language                     files          blank        comment           =
code
---------------------------------------------------------------------------=
----
C                              518          61871          52705         47=
3034
Python                        1965          76022          95289         36=
5716
Perl                          2052         110356         130018         29=
2281
C/C++ Header                   381          13762          21402         10=
2276
Bourne Shell                   149           9376          11665          8=
1508
Lisp                             2           1154           2745          1=
0448
Assembly                        38           1616           1712           =
9755
m4                               3            825             34           =
7124
make                            16            954            804           =
4829
HTML                            25            516             13           =
3010
Teamcenter def                   9            170            162           =
2075
XML                             28            288              0           =
2034
C++                             10            312            277           =
2000
yacc                             2            128             97           =
1549
DOS Batch                       42            175            152           =
 746
Objective C                      7            102             70           =
 635
YAML                             2              2              0           =
 489
CSS                              1             94             19           =
 308
vim script                       1             36              7           =
 105
Expect                           1              0              0           =
  60
NAnt scripts                     2              1              0           =
  30
Visual Basic                     2              1              1           =
  12
---------------------------------------------------------------------------=
----
SUM:                          5256         277761         317172        136=
0024
---------------------------------------------------------------------------=
----

<i>Unix&gt;</i> cat script_lang.file
---------------------------------------------------------------------------=
----
Report File                  files          blank        comment           =
code
---------------------------------------------------------------------------=
----
python-2.6.4.txt              2746         135676         143269         83=
0347
perl-5.10.0.txt               2510         142085         173903         52=
9677
---------------------------------------------------------------------------=
----
SUM:                          5256         277761         317172        136=
0024
---------------------------------------------------------------------------=
----

</pre>
Finally, combine the combination files:
<pre><i>Unix&gt;</i> cloc --sum-reports --report_file=3Deverything database=
s.lang script_lang.lang
Wrote everything.lang
Wrote everything.file

<i>Unix&gt;</i> cat everything.lang
http://cloc.sourceforge.net v 1.50
---------------------------------------------------------------------------=
-----
Language                      files          blank        comment          =
 code
---------------------------------------------------------------------------=
-----
C                              2085         254833         340512        14=
99445
C++                             625          93921         111186         5=
23041
Python                         1966          76027          95290         3=
65728
Perl                           2148         118772         135381         3=
19878
C/C++ Header                   2004          57077         126566         2=
87122
Bourne Shell                    385          31304          30869         2=
10368
SQL                             278           8763           5854          =
29295
m4                               30           2998            473          =
25609
yacc                             10           2962           2263          =
25422
make                            316           3089           4044          =
12742
Assembly                         53           1794           1712          =
11164
Lisp                              2           1154           2745          =
10448
XML                              55            852             23          =
 6141
lex                              10           1040           1638          =
 4517
Teamcenter def                   65            259            381          =
 3880
HTML                             28            617             14          =
 3670
DOS Batch                        57            251            247          =
  970
Objective C                       7            102             70          =
  635
YAML                              2              2              0          =
  489
Javascript                        3             70            140          =
  427
Pascal                            2              0            436          =
  377
CSS                               2            110             26          =
  352
XSLT                              5             41             30          =
  111
vim script                        1             36              7          =
  105
D                                 1             14             14          =
   65
Expect                            1              0              0          =
   60
Bourne Again Shell                1              6              1          =
   48
NAnt scripts                      2              1              0          =
   30
sed                               1              1              7          =
   15
Visual Basic                      2              1              1          =
   12
---------------------------------------------------------------------------=
-----
SUM:                          10147         656097         859930        33=
42166
---------------------------------------------------------------------------=
-----

<i>Unix&gt;</i> cat everything.file
---------------------------------------------------------------------------=
----
Report File                  files          blank        comment           =
code
---------------------------------------------------------------------------=
----
databases.lang                4891         378336         542758        198=
2142
script_lang.lang              5256         277761         317172        136=
0024
---------------------------------------------------------------------------=
----
SUM:                         10147         656097         859930        334=
2166
---------------------------------------------------------------------------=
----

</pre>
<p></p>

<!-- 1}}} -->
<!--   SQL {{{1 -->=20
<h2><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"sql">SQL<img alt=3D"^" src=3D"http://=
cloc.sourceforge.net/up.gif"></a></h2>
<p>
Cloc can write results in the form of SQL table create and insert
statements for use
with relational database programs such as SQLite, MySQL,=20
PostgreSQL, Oracle, or Microsoft SQL.  Once the code count information is i=
n a database,
the information can be interrogated and displayed in interesting ways.
</p>
<p>
A database created from cloc SQL output has two tables,=20
<b>metadata</b> and <b>t</b>: =20

</p><center>
<table border=3D"0">
<tbody><tr>
<td valign=3D"top">

<h4>metadata</h4>
<table border=3D"1">
<tbody><tr>
  <th>Field</th>
  <th>Type</th>
</tr>
<tr> <td>&nbsp; timestamp &nbsp; &nbsp; </td> <td>&nbsp; text</td> </tr>
<tr> <td>&nbsp; project</td>                  <td>&nbsp; text</td> </tr>
<tr> <td>&nbsp; elapsed_s</td>                <td>&nbsp; real</td> </tr>
</tbody></table>
</td>

<td>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
</td>

<td valign=3D"top">
<h4>t</h4>
<table border=3D"1">
<tbody><tr>
  <th>Field</th>
  <th>Type</th>
</tr>
<tr> <td>&nbsp; project &nbsp; &nbsp; </td> <td>&nbsp; text</td> </tr>
<tr> <td>&nbsp; language</td>               <td>&nbsp; text</td> </tr>
<tr> <td>&nbsp; file</td>                   <td>&nbsp; text</td> </tr>
<tr> <td>&nbsp; nBlank</td>                 <td>&nbsp; integer</td> </tr>
<tr> <td>&nbsp; nComment</td>               <td>&nbsp; integer</td> </tr>
<tr> <td>&nbsp; nCode</td>                  <td>&nbsp; integer</td> </tr>
<tr> <td>&nbsp; nScaled</td>                <td>&nbsp; real</td> </tr>
</tbody></table>

</td>
</tr>
</tbody></table>
</center>
<p></p>
<p>

The <b>metadata</b> table contains information about when the cloc run=20
was made.  The <tt>--sql-append</tt> switch allows one to combine
many runs in a single database; each run adds a
row to the metadata table.
The code count information resides in table <b>t</b>.
</p>
<p>
Let's repeat the code count examples of Perl, Python, SQLite, MySQL and=20
PostgreSQL tarballs shown in the <a href=3D"http://cloc.sourceforge.net/#co=
mbine_reports">combine reports</a>
example above, this time
using the SQL output options and the=20
<a href=3D"http://www.sqlite.org/">SQLite</a> database engine.
</p>
<p>
The <tt>--sql</tt> switch tells cloc to generate output in the form
of SQL table <tt>create</tt> and <tt>insert</tt> commands.  The switch take=
s=20
an argument of a file name to write these SQL statements into, or,
if the argument is 1 (numeric one), streams output to STDOUT.
Since the SQLite command line program, <tt>sqlite3</tt>, can read
commands from STDIN, we can dispense with storing SQL statements to
a file and use <tt>--sql 1</tt> to pipe data directly into the
SQLite executable:
</p><pre>cloc --sql 1 --sql-project mysql mysql-5.1.42.tar.gz    | sqlite3 =
code.db
</pre>
The <tt>--sql-project mysql</tt> part is optional; there's no need
to specify a project name when working with just one code base.  However,
since we'll be adding code counts from four other tarballs, we'll only
be able to identify data by input source if we supply a
project name for each run.
<p></p>
<p>
Now that we have a database we will need to pass in the
<tt>--sql-append</tt> switch to tell cloc not to wipe out this
database but instead add more data:
</p><pre>cloc --sql 1 --sql-project postgresql --sql-append postgresql-8.4.=
2.tar.bz2          | sqlite3 code.db
cloc --sql 1 --sql-project sqlite     --sql-append sqlite-amalgamation-3.6.=
22.tar.gz | sqlite3 code.db
cloc --sql 1 --sql-project python     --sql-append Python-2.6.4.tar.bz2    =
          | sqlite3 code.db
cloc --sql 1 --sql-project perl       --sql-append perl-5.10.0.tar.gz      =
          | sqlite3 code.db
</pre>
<p></p>
<p>
Now the fun begins--we have a database, <tt>code.db</tt>, with lots of
information about the five projects and can begin querying it for all
manner of interesting facts.
</p>
<h4><i>Which is the longest file over all projects?</i></h4>

<pre>&gt;  sqlite3 code.db 'select project,file,nBlank+nComment+nCode as nL=
 from t where nL =3D (select max(nBlank+nComment+nCode) from t)'
<font color=3D"darkgreen">
sqlite|sqlite-3.6.22/sqlite3.c|110860
</font>
</pre>
<tt>sqlite3</tt>'s default output format leaves a bit to be desired. =20
We can add an option to the program's rc file, <tt>~/.sqliterc</tt>,=20
to show column headers: <br>
<tt>
.header on<br>
</tt>
One might be tempted to also include<br>
<tt>
.mode column<br>
</tt>
in <tt>~/.sqliterc</tt>
but this causes problems when the output has more than one row
since the widths of entries in the first row govern=20
the maximum width for all subsequent rows.  Often this leads
to truncated output--not at all desireable.
One option is to write a custom SQLite output formatter such
as <a href=3D"http://cloc.sourceforge.net/sqlite_formatter"><tt>sqlite_form=
atter</tt></a>.
It is used like so:
<pre>&gt;  sqlite3 code.db 'select project,file,nBlank+nComment+nCode as nL=
 from t where nL =3D (select max(nBlank+nComment+nCode) from t)' | sqlite_f=
ormatter
<font color=3D"darkgreen">
Project File                    nL    =20
_______ _______________________ ______=20
sqlite  sqlite-3.6.22/sqlite3.c 110860
</font>
</pre>
Note also that <tt>sqlite3</tt> has an HTML output option, <tt>--html</tt>,
that might also prove useful.

<h4><i>Which is the longest file in each project?</i></h4>
<pre>&gt; sqlite3 code.db 'select project,file,max(nBlank+nComment+nCode) a=
s nL from t group by project order by nL;' | sqlite_formatter
<font color=3D"darkgreen">
Project    File                                          nL    =20
__________ _____________________________________________ ______=20
perl       perl-5.10.0/t/op/mkdir.t                       22658=20
python     Python-2.6.4/Lib/email/quoprimime.py           28091=20
postgresql postgresql-8.4.2/contrib/pgcrypto/pgp-pgsql.c  40041=20
mysql      mysql-5.1.42/netware/mysqldump.def             51841=20
sqlite     sqlite-3.6.22/config.sub                      110860=20
</font>
</pre>

<h4><i>Which files in each project have the most code lines?</i></h4>
<pre>&gt; sqlite3 code.db 'select project,file,max(nCode) as nL from t grou=
p by project order by nL desc;' | sqlite_formatter
<font color=3D"darkgreen">
Project    File                                          nL   =20
__________ _____________________________________________ _____=20
sqlite     sqlite-3.6.22/config.sub                      66142=20
mysql      mysql-5.1.42/netware/mysqldump.def            38555=20
postgresql postgresql-8.4.2/contrib/pgcrypto/pgp-pgsql.c 36905=20
python     Python-2.6.4/Lib/email/quoprimime.py          26705=20
perl       perl-5.10.0/t/op/mkdir.t                      20079=20
</font>
</pre>

<h4><i>Which C source files with more than 300 lines have a comment ratio b=
elow 1%?</i></h4>
<pre>&gt; sqlite3 code.db 'select project, language, file, nCode, nComment,=
 (100.0*nComment)/(nComment+nCode) as comment_ratio from t=20
   where language=3D"C" and nCode &gt; 300 and comment_ratio &lt; 1 order b=
y comment_ratio;' | sqlite_formatter
<font color=3D"darkgreen">
Project    Language File                                                   =
                       nCode nComment comment_ratio     =20
__________ ________ _______________________________________________________=
______________________ _____ ________ __________________=20
mysql      C        mysql-5.1.42/scripts/mysql_fix_privilege_tables_sql.c  =
                         658        0 0.0               =20
python     C        Python-2.6.4/Python/graminit.c                         =
                        2143        1 0.0466417910447761=20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_U=
TF_8_turkish.c          2095        1 0.0477099236641221=20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_U=
TF_8_french.c           1211        1 0.0825082508250825=20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_I=
SO_8859_1_french.c      1201        1 0.0831946755407654=20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_U=
TF_8_hungarian.c        1182        1 0.084530853761623 =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_I=
SO_8859_1_hungarian.c   1178        1 0.0848176420695505=20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_U=
TF_8_english.c          1072        1 0.0931966449207828=20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_I=
SO_8859_1_english.c     1064        1 0.0938967136150235=20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_U=
TF_8_spanish.c          1053        1 0.094876660341556 =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_I=
SO_8859_1_spanish.c     1049        1 0.0952380952380952=20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_U=
TF_8_italian.c          1031        1 0.0968992248062016=20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_I=
SO_8859_1_italian.c     1023        1 0.09765625        =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_U=
TF_8_portuguese.c        981        1 0.10183299389002  =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_I=
SO_8859_1_portuguese.c   975        1 0.102459016393443 =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_U=
TF_8_romanian.c          967        1 0.103305785123967 =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_I=
SO_8859_2_romanian.c     961        1 0.103950103950104 =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_U=
TF_8_finnish.c           720        1 0.13869625520111  =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_U=
TF_8_porter.c            717        1 0.139275766016713 =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_I=
SO_8859_1_finnish.c      714        1 0.13986013986014  =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_I=
SO_8859_1_porter.c       711        1 0.140449438202247 =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_K=
OI8_R_russian.c          660        1 0.151285930408472 =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_U=
TF_8_russian.c           654        1 0.152671755725191 =20
python     C        Python-2.6.4/Mac/Modules/qt/_Qtmodule.c                =
                       26705       42 0.157026956294164 =20
python     C        Python-2.6.4/Mac/Modules/icn/_Icnmodule.c              =
                        1521        3 0.196850393700787 =20
mysql      C        mysql-5.1.42/strings/ctype-extra.c                     =
                        8348       17 0.203227734608488 =20
python     C        Python-2.6.4/Python/Python-ast.c                       =
                        5910       17 0.286823013328834 =20
python     C        Python-2.6.4/Mac/Modules/menu/_Menumodule.c            =
                        3263       10 0.305530094714329 =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_U=
TF_8_dutch.c             596        2 0.334448160535117 =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_I=
SO_8859_1_dutch.c        586        2 0.340136054421769 =20
perl       C        perl-5.10.0/x2p/a2p.c                                  =
                        2916       10 0.341763499658236 =20
python     C        Python-2.6.4/Mac/Modules/qd/_Qdmodule.c                =
                        6694       24 0.357249181303959 =20
python     C        Python-2.6.4/Mac/Modules/win/_Winmodule.c              =
                        3056       11 0.358656667753505 =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_U=
TF_8_german.c            476        2 0.418410041841004 =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_I=
SO_8859_1_german.c       470        2 0.423728813559322 =20
perl       C        perl-5.10.0/x2p/walk.c                                 =
                        2024       10 0.491642084562439 =20
python     C        Python-2.6.4/Mac/Modules/ctl/_Ctlmodule.c              =
                        5442       28 0.511882998171846 =20
python     C        Python-2.6.4/Mac/Modules/ae/_AEmodule.c                =
                        1347        7 0.51698670605613  =20
python     C        Python-2.6.4/Mac/Modules/app/_Appmodule.c              =
                        1712        9 0.52295177222545  =20
mysql      C        mysql-5.1.42/strings/ctype-euc_kr.c                    =
                        8691       49 0.560640732265446 =20
mysql      C        mysql-5.1.42/storage/archive/archive_reader.c          =
                         348        2 0.571428571428571 =20
python     C        Python-2.6.4/Mac/Modules/evt/_Evtmodule.c              =
                         504        3 0.591715976331361 =20
python     C        Python-2.6.4/Modules/expat/xmlrole.c                   =
                        1250        8 0.635930047694754 =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_U=
TF_8_danish.c            312        2 0.636942675159236 =20
mysql      C        mysql-5.1.42/strings/ctype-gbk.c                       =
                        9946       64 0.639360639360639 =20
postgresql C        postgresql-8.4.2/src/backend/snowball/libstemmer/stem_I=
SO_8859_1_danish.c       310        2 0.641025641025641 =20
mysql      C        mysql-5.1.42/strings/ctype-gb2312.c                    =
                        5735       40 0.692640692640693 =20
python     C        Python-2.6.4/Mac/Modules/res/_Resmodule.c              =
                        1621       12 0.734843845682792 =20
python     C        Python-2.6.4/Mac/Modules/drag/_Dragmodule.c            =
                        1046        8 0.759013282732448 =20
postgresql C        postgresql-8.4.2/contrib/hstore/hstore_op.c            =
                         522        4 0.760456273764259 =20
python     C        Python-2.6.4/Mac/Modules/list/_Listmodule.c            =
                        1022        8 0.776699029126214 =20
python     C        Python-2.6.4/Mac/Modules/te/_TEmodule.c                =
                        1198       10 0.827814569536424 =20
python     C        Python-2.6.4/Mac/Modules/cg/_CGmodule.c                =
                        1190       10 0.833333333333333 =20
postgresql C        postgresql-8.4.2/contrib/hstore/hstore_io.c            =
                         451        4 0.879120879120879 =20
postgresql C        postgresql-8.4.2/src/interfaces/ecpg/preproc/preproc.c =
                       36905      330 0.886262924667651 =20
python     C        Python-2.6.4/Modules/clmodule.c                        =
                        2379       23 0.957535387177352 =20
python     C        Python-2.6.4/Mac/Modules/folder/_Foldermodule.c        =
                         306        3 0.970873786407767 =20
</font>
</pre>

<h4><i>What are the ten longest files (based on code lines) that have no co=
mments at all?  Exclude header and YAML files.</i></h4>
<pre>&gt; sqlite3 code.db 'select project, file, nCode from t where nCommen=
t =3D 0 and language not in ("C/C++ Header", "YAML") order by nCode desc li=
mit 10;' | sqlite_formatter
<font color=3D"darkgreen">
Project File                                                  nCode=20
_______ _____________________________________________________ _____=20
python  Python-2.6.4/PC/os2emx/python26.def                    1188=20
python  Python-2.6.4/Lib/test/cjkencodings_test.py             1019=20
python  Python-2.6.4/Tools/msi/schema.py                        920=20
python  Python-2.6.4/Lib/msilib/schema.py                       920=20
perl    perl-5.10.0/symbian/config.sh                           810=20
perl    perl-5.10.0/uconfig.sh                                  771=20
python  Python-2.6.4/Tools/pybench/Lookups.py                   700=20
mysql   mysql-5.1.42/scripts/mysql_fix_privilege_tables_sql.c   658=20
python  Python-2.6.4/Tools/pybench/Numbers.py                   637=20
python  Python-2.6.4/Tools/pybench/Arithmetic.py                596
</font>
</pre>

<h4><i>What are the most popular languages (in terms of lines
of code) in each project?</i></h4>
<pre>&gt; sqlite3 code.db 'select project, language, sum(nCode) as SumCode =
from t group by project,language order by project,SumCode desc;' | sqlite_f=
ormatter
<font color=3D"darkgreen">
Project    Language           SumCode=20
__________ __________________ _______=20
mysql      C++                 521041=20
mysql      C                   393602=20
mysql      C/C++ Header        142779=20
mysql      Bourne Shell         74525=20
mysql      Perl                 22703=20
mysql      m4                   10497=20
mysql      make                  4447=20
mysql      XML                   4107=20
mysql      SQL                   3433=20
mysql      Assembly              1304=20
mysql      yacc                  1048=20
mysql      lex                    879=20
mysql      Teamcenter def         701=20
mysql      Javascript             427=20
mysql      Pascal                 377=20
mysql      HTML                   250=20
mysql      Bourne Again Shell      48=20
mysql      DOS Batch               36=20
perl       Perl                292281=20
perl       C                   140483=20
perl       C/C++ Header         44042=20
perl       Bourne Shell         36882=20
perl       Lisp                  7515=20
perl       make                  2044=20
perl       C++                   2000=20
perl       XML                   1972=20
perl       yacc                  1549=20
perl       YAML                   489=20
perl       DOS Batch              322=20
perl       HTML                    98=20
postgresql C                   563865=20
postgresql C/C++ Header         40990=20
postgresql Bourne Shell         28486=20
postgresql SQL                  25862=20
postgresql yacc                 22825=20
postgresql Perl                  4894=20
postgresql lex                   3638=20
postgresql make                  3453=20
postgresql m4                    1431=20
postgresql Teamcenter def        1104=20
postgresql HTML                   410=20
postgresql DOS Batch              188=20
postgresql XSLT                   111=20
postgresql Assembly               105=20
postgresql D                       65=20
postgresql CSS                     44=20
postgresql sed                     15=20
postgresql Python                  12=20
python     Python              365716=20
python     C                   332551=20
python     C/C++ Header         58234=20
python     Bourne Shell         44626=20
python     Assembly              9755=20
python     m4                    7124=20
python     Lisp                  2933=20
python     HTML                  2912=20
python     make                  2785=20
python     Teamcenter def        2075=20
python     Objective C            635=20
python     DOS Batch              424=20
python     CSS                    308=20
python     vim script             105=20
python     XML                     62=20
python     Expect                  60=20
python     NAnt scripts            30=20
python     Visual Basic            12=20
sqlite     C                    68944=20
sqlite     Bourne Shell         25849=20
sqlite     m4                    6557=20
sqlite     C/C++ Header          1077=20
sqlite     make                    13=20
</font>
</pre>

<!-- 1}}} -->
<!--   Third Generation Language Scale Factors {{{1 -->=20
<h2><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"scale_factors">Third Generation Langu=
age Scale Factors<img alt=3D"^" src=3D"http://cloc.sourceforge.net/up.gif">=
</a></h2>
<p>
cloc versions before 1.50 by default computed, for the provided inputs, a
rough estimate of how many lines of code would be needed to write the
same code in a hypothetical third-generation computer language.
To produce this output one must now use the <tt>--3</tt> switch.
</p>
<p>
Scale factors were derived from the 2006 version of language gearing ratios
listed at Mayes Consulting web site, <a href=3D"http://softwareestimator.co=
m/IndustryData2.htm">http://softwareestimator.com/IndustryData2.htm</a>, us=
ing this equation:</p>
<p>
cloc scale factor for language X =3D 3rd generation default gearing ratio /=
 language X gearing ratio
</p>
<p>
for example,
</p>
<p>
cloc 3rd generation scale factor for DOS Batch =3D 80 / 128 =3D 0.625
</p>
<p>
The biggest flaw with this approach is that gearing ratios
are defined for logical lines of source code not physical lines (which cloc=
 counts).
The values in cloc's 'scale' and '3rd gen. equiv.' columns should be taken=
=20
with a large grain of salt.
</p>
<!-- 1}}} -->
<!--   Suppress Third Generation Language Output {{{1 -->=20
<!--
<h2><a class=3D'u' href=3D'#___top' title=3D'click to go to top of document=
'
name=3D"no3_output">Suppress Third Generation Language Output<img alt=3D'^'=
 src=3D'up.gif'></a></h2>
<p>
Third generation scale factor output can be suppressed with the <tt>--no3</=
tt> option to
produce cleaner output.  Here's what the output looks like
for the same Perl 5.10.0 count shown <a href=3D#Basic_Use>above</a>:
</p>
<pre>
<i>prompt&gt;</i> cloc --no3 perl-5.10.0.tar.gz
    4076 text files.
    3882 unique files.                                         =20
    1521 files ignored.

http://cloc.sourceforge.net v 1.10  T=3D10.0 s (251.0 files/s, 84566.5 line=
s/s)
---------------------------------------------------------------------------=
----
Language                     files          blank        comment           =
code
---------------------------------------------------------------------------=
----
Perl                          2052         110356         130018         29=
2281
C                              135          18718          22862         14=
0483
C/C++ Header                   147           7650          12093          4=
4042
Bourne Shell                   116           3402           5789          3=
6882
Lisp                             1            684           2242           =
7515
make                             7            498            473           =
2044
C++                             10            312            277           =
2000
XML                             26            231              0           =
1972
yacc                             2            128             97           =
1549
YAML                             2              2              0           =
 489
DOS Batch                       11             85             50           =
 322
HTML                             1             19              2           =
  98
---------------------------------------------------------------------------=
----
SUM:                          2510         142085         173903         52=
9677
---------------------------------------------------------------------------=
----

</pre>
<p>
If you use the report summation feature, make sure
all inputs were produced the same way, either all with the
<tt>--no3</tt> option or all without.
</p>
 -->
<!-- 1}}} -->
<!-- Troubleshooting {{{1 -->=20
<!--
<h1><a class=3D'u' href=3D'#___top' title=3D'click to go to top of document=
'
name=3D"Troubleshooting">Troubleshooting <img alt=3D'^' src=3D'up.gif'></a>=
</h1>
<p>
</p>
 -->
<!-- 1}}} -->
<!-- Limitations {{{1 -->=20
<!--
 -->
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"Limitations">Limitations <img alt=3D"=
^" src=3D"http://cloc.sourceforge.net/up.gif"></a></h1>
<p>
Identifying comments within source code is trickier than one might expect.
Many languages would need a complete parser to be counted correctly.
cloc does not attempt to parse any of=20
the languages it aims to count and therefore is an imperfect tool.
The following are known problems:
</p><ol>
<li>  Lines containing both source code and comments are counted as lines o=
f code.
</li><li>  Comment markers within strings or=20
<a href=3D"http://www.faqs.org/docs/abs/HTML/here-docs.html">here-documents=
</a>
are treated as actual comment markers and not string literals. =20
For example the following lines of C code
<pre>printf(" <font color=3D"red">/* ");
for (i =3D 0; i &lt; 100; i++) {
    a +=3D i;
}
printf(" */</font> ");
</pre>
appear to cloc as two lines of C code (the lines with black text) and three
lines of comments (the lines which have only red text--lines with both
black and red text are treated as code).
</li><li>  Lua long comments are not recognized.
</li></ol>
<p></p>
<!-- 1}}} -->
<!-- How to Request Support for Additional Languages {{{1 -->=20
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"AdditionalLanguages">How to Request S=
upport for Additional Languages<img alt=3D"^" src=3D"http://cloc.sourceforg=
e.net/up.gif"></a></h1>
<p>
If cloc does not recognize a language you are interested in counting,
post the following information to a=20
<a href=3D"http://sourceforge.net/p/cloc/feature-requests/">Feature Request=
</a>
at cloc's SourceForge page:
</p><ol>
<li> File extensions associated with the language.  If the language does
not rely on file extensions and instead works with fixed file names or
with <tt>#!</tt> style program invocations, explain what those are.
</li><li> A description of how comments are defined.
</li><li> Links to sample code.
</li></ol>
<p></p>
<!-- 1}}} -->
<!-- Author {{{1 -->=20
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"Author">Author <img alt=3D"^" src=3D"=
http://cloc.sourceforge.net/up.gif"></a></h1>
<p>
Al Danial <img src=3D"http://cloc.sourceforge.net/address.png">
</p>
<!-- 1}}} -->
<!-- Acknowledgments {{{1 -->=20
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"Acknowledgments">Acknowledgments <img=
 alt=3D"^" src=3D"http://cloc.sourceforge.net/up.gif"></a></h1>
<p>
Wolfram R=F6sler provided most of the code examples in the test suite.
These examples come from his <a href=3D"http://www.roesler-ac.de/wolfram/he=
llo.htm">
Hello World Collection</a>.
</p>
<p>
Ismet Kursunoglu found errors with the MUMPS counter and provided
access to a computer with a large body of MUMPS code to test cloc.
</p>
<p>
Tod Huggins gave helpful suggestions for the Visual Basic filters.
</p>
<p>
Anton Demichev found a flaw with the JSP counter in cloc v0.76
and wrote the XML ouput generator for the <tt>--xml</tt> option.
</p>
<p>
Reuben Thomas pointed out that ISO C99 allows <tt>//</tt> as a comment=20
marker, provided code for the <tt>--no3</tt> and <tt>--stdin-name</tt>=20
options, counting the m4 language,=20
and suggested several user-interface enhancements.
</p>
<p>
Michael Bello provided code for the <tt>--opt-match-f</tt>,
<tt>--opt-not-match-f</tt>,
<tt>--opt-match-d</tt>, and <tt>--opt-not-match-d</tt>
options.=20
</p>
<p>
Mahboob Hussain inspired the <tt>--original-dir</tt> and=20
<tt>--skip-uniqueness</tt> options, found a
bug in the duplicate file detection logic and improved the JSP filter.
</p>
<p>
Randy Sharo found and fixed an uninitialized variable bug for shell=20
scripts having only one line.
</p>
<p>
Steven Baker found and fixed a problem with the YAML output generator.
</p>
<p>
Greg Toth provided code to improve blank line detection in COBOL.
</p>
<p>
Joel Oliveira provided code to let <tt>--exclude-list-file</tt> handle
directory name exclusion.
</p>
<p>
Blazej Kroll provided code to produce an XSLT file, <tt>cloc-diff.xsl</tt>,
when producing XML output for the <tt>--diff</tt> option.
</p>
<p>
Denis Silakov enhanced the code which generates <tt>cloc.xsl</tt> when=20
using <tt>--by-file</tt> and <tt>--by-file-by-lang</tt> options, and
provided an XSL file that works with <tt>--diff</tt> output.
</p>
<p>
Andy (awalshe@sf.net) provided code to fix several bugs: =20
correct output of <tt>--counted</tt>
so that only files that are used in the code count appear and
that results are shown by language rather than file name;
allow <tt>--diff</tt> output from multiple runs to be summed
together with <tt>--sum-reports</tt>.
</p>
<p>
Jari Aalto created the initial version of <tt>cloc.1.pod</tt> and
maintains the Debian package for cloc.
</p>
<p>
Mikkel Christiansen (mikkels@gmail.com) provided counter definitions
for Clojure and ClojureScript.
</p>
<p>
Vera Djuraskovic from <a href=3D"http://webhostinggeeks.com/">
Webhostinggeeks.com</a>
provided the=20
<a href=3D"http://science.webhostinggeeks.com/cloc">Serbo-Croatian</a>
translation.
</p>
<p>
Gill Ajoft of <a href=3D"http://www.ajoft.com/">Ajoft Softwares</a>
provided the
<a href=3D"http://www.ajoft.com/wpaper/aj-cloc.html">Bulgarian</a>
translation.
</p>
<p>
Blahoslav Konopka provided the=20
<a href=3D"http://jbs24.com/blog/cloc-grof-riadkov-kodu/">Slovakian</a>
translation.
</p>
<p>
Erik Gooven Arellano Casillas provided an update to the MXML counter to=20
recognize Actionscript comments.
</p>
<p>
<a href=3D"http://g14n.info/">Gianluca Casati</a> created the
<a href=3D"https://metacpan.org/pod/App::cloc">cloc CPAN package</a>.
</p>
<p>
Mary Stefanova provided the=20
<a href=3D"http://www.trevister.com/blog/cloc.html">Polish</a>
translation.
</p>
<p>
Ryan Lindeman implemented the <tt>--by-percent</tt> feature.
</p>
<p>
Kent C. Dodds, <a href=3D"https://twitter.com/kentcdodds">@kentcdodds</a>,=
=20
created and maintains the npm package of cloc.
</p>
<p>
The development of cloc was partially funded by the Northrop Grumman=20
Corporation.
</p>
<!-- 1}}} -->
<!-- Copyright {{{1 -->=20
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"Copyright">Copyright <img alt=3D"^" s=
rc=3D"http://cloc.sourceforge.net/up.gif"></a></h1>
<p>
Copyright (c) 2006-2015, <img src=3D"http://cloc.sourceforge.net/address.pn=
g">.<br>
</p>
<!-- 1}}} -->
<!-- License {{{1 -->=20
<h1><a class=3D"u" href=3D"http://cloc.sourceforge.net/#___top" title=3D"cl=
ick to go to top of document" name=3D"License">License <img alt=3D"^" src=
=3D"http://cloc.sourceforge.net/up.gif"></a></h1>
<p>
This program is free software; you can redistribute it and/or modify
it under the terms of the=20
<a href=3D"http://www.gnu.org/licenses/gpl.txt">
GNU General Public License</a>
as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
</p>
<!-- 1}}} -->

</div>
</div>
<hr>
<center>
<a href=3D"http://sourceforge.net/projects/cloc"><img src=3D"http://cloc.so=
urceforge.net/sflogo.gif" alt=3D"Get cloc at SourceForge.net. Fast, secure =
and Free Open Source software downloads" height=3D"40" border=3D"0" width=
=3D"150"></a>
</center>
=20
=20


<div><object id=3D"ClCache" click=3D"sendMsg" host=3D"" width=3D"0" height=
=3D"0"></object></div></body></html>
------=_NextPart_000_D6C5_38402F7D.C5F44288
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://cloc.sourceforge.net/style.css

body, .logo { background: white; }

body { color: black; font-family: arial, sans-serif; margin: 0px; padding: =
1ex; }

table { border-collapse: collapse; border-spacing: 0px; border-width: 0px; =
color: inherit; }

img { border: 0px; }

form { margin: 0px; }

input { margin: 2px; }

.logo { float: left; width: 264px; height: 77px; }

.front .logo { float: none; display: block; }

.front .searchbox { margin: 2ex auto; text-align: center; }

.front .menubar { text-align: center; }

.menubar { margin: 1ex 0px; padding: 1px; background: rgb(0, 102, 153); }

.menubar a { padding: 0.8ex; font-weight: bold; font-style: normal; font-va=
riant: normal; font-stretch: normal; font-size: 10pt; line-height: normal; =
font-family: Arial, Helvetica, sans-serif; }

.menubar a:link, .menubar a:visited { color: white; text-decoration: none; =
}

.menubar a:hover { color: rgb(255, 102, 0); text-decoration: underline; }

a:link, a:visited { color: rgb(0, 102, 153); background: transparent; }

a[href=3D"#POD_ERRORS"] { color: rgb(255, 0, 0); background: transparent; }

td { margin: 0px; padding: 0px; }

div { border-width: 0px; }

dt { margin-top: 1em; }

.credits td { padding: 0.5ex 2ex; }

.huge { font-size: 32pt; }

.s { color: inherit; background: rgb(221, 221, 221); }

.s td, .r td { padding: 0.2ex 1ex; vertical-align: baseline; }

th { color: inherit; padding: 0.4ex 1ex; text-align: left; background: rgb(=
187, 187, 187); }

th a:link, th a:visited { color: black; background: transparent; }

.box { border: 1px solid rgb(0, 102, 153); margin: 1ex 0px; padding: 0px; }

.distfiles td { padding: 0px 2ex 0px 0px; vertical-align: baseline; }

.manifest td { padding: 0px 1ex; vertical-align: top; }

.l1 { font-weight: bold; }

.l2 { font-weight: normal; }

.t1, .t2, .t3, .t4 { color: white; background: rgb(0, 102, 153); }

.t4 { padding: 0.2ex 0.4ex; }

.t1, .t2, .t3 { padding: 0.5ex 1ex; }

.box .t1, .box .t2, .box .t3 { margin: 0px; }

.t1 { font-size: 1.4em; font-weight: bold; text-align: center; }

.t2 { font-size: 1em; font-weight: bold; text-align: left; }

.t3 { font-size: 1em; font-weight: normal; text-align: left; }

.datecell { text-align: center; width: 17em; }

.cell { padding: 0.2ex 1ex; text-align: left; }

.label { color: black; font-weight: bold; padding: 0.2ex 1ex; text-align: r=
ight; white-space: nowrap; vertical-align: baseline; background: rgb(170, 1=
70, 170); }

.categories { border-bottom-width: 3px; border-bottom-style: double; border=
-bottom-color: rgb(0, 102, 153); margin-bottom: 1ex; padding-bottom: 1ex; }

.categories table { margin: auto; }

.categories td { padding: 0.5ex 1ex; vertical-align: baseline; }

.path a { color: rgb(0, 102, 153); font-weight: bold; background: transpare=
nt; }

.pages { color: rgb(0, 102, 153); padding: 0.2ex 0.4ex; background: rgb(221=
, 221, 221); }

.path { border-bottom-width: 1px; border-bottom-style: solid; border-bottom=
-color: rgb(0, 102, 153); color: rgb(0, 102, 153); margin: 1ex 0px; padding=
: 0.5ex 1ex; background: rgb(221, 221, 221); }

.menubar td { color: white; background: rgb(0, 102, 153); }

.menubar { color: white; margin: 1ex 0px; padding: 1px; background: rgb(0, =
102, 153); }

.menubar .links { color: white; padding: 0.2ex; text-align: left; backgroun=
d: transparent; }

.menubar .searchbar { color: black; margin: 0px; padding: 2px; text-align: =
right; background: black; }

a.m:link, a.m:visited { color: white; font-weight: bold; font-style: normal=
; font-variant: normal; font-stretch: normal; font-size: 10pt; line-height:=
 normal; font-family: Arial, Helvetica, sans-serif; text-decoration: none; =
background: rgb(0, 102, 153); }

a.o:link, a.o:visited { color: rgb(204, 255, 204); font-weight: bold; font-=
style: normal; font-variant: normal; font-stretch: normal; font-size: 10pt;=
 line-height: normal; font-family: Arial, Helvetica, sans-serif; text-decor=
ation: none; background: rgb(0, 102, 153); }

a.o:hover { color: rgb(255, 102, 0); text-decoration: underline; background=
: transparent; }

a.m:hover { color: rgb(255, 102, 0); text-decoration: underline; background=
: transparent; }

table.dlsip { border: 0.4ex solid rgb(221, 221, 221); background: rgb(221, =
221, 221); }

.pod pre { border: 1px solid rgb(136, 136, 136); color: black; padding: 1em=
; white-space: pre; background: rgb(238, 238, 238); }

.pod h1 { color: rgb(0, 102, 153); font-size: large; background: transparen=
t; }

.pod h1 a { text-decoration: none; }

.pod h2 a { text-decoration: none; }

.pod h2 { color: rgb(0, 102, 153); font-size: medium; background: transpare=
nt; }

.pod img { vertical-align: top; }

.pod .toc a { text-decoration: none; }

.pod .toc li { line-height: 1.2em; list-style-type: none; }

.faq dt { font-size: 1.4em; font-weight: bold; }

.chmenu { color: red; font-weight: bold; font-style: normal; font-variant: =
normal; font-stretch: normal; font-size: 1.1em; line-height: normal; font-f=
amily: Arial, Helvetica, sans-serif; margin: 1ex auto; padding: 0.5ex; back=
ground: black; }

.chmenu td { padding: 0.2ex 1ex; }

.chmenu a:link, .chmenu a:visited { color: white; text-decoration: none; ba=
ckground: transparent; }

.chmenu a:hover { color: rgb(255, 102, 0); text-decoration: underline; back=
ground: transparent; }

.column { padding: 0.5ex 1ex; vertical-align: top; }

.datebar { margin: auto; width: 14em; }

.date { color: rgb(0, 128, 0); background: transparent; }

.footer { margin-top: 1ex; text-align: right; color: rgb(0, 102, 153); font=
-size: x-small; border-top-width: 1px; border-top-style: solid; border-top-=
color: rgb(0, 102, 153); line-height: 120%; }

.front .footer { border-top-style: none; }
------=_NextPart_000_D6C5_38402F7D.C5F44288
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://cloc.sourceforge.net/up.gif

R0lGODlhDwAPAIAAAABmmf///yH5BAEAAAEALAAAAAAPAA8AAAIjhI8Jwe1tXlgvulMpS1crT33W
uGBkpm3pZEEr1qGZHEuSKBYAOw==
------=_NextPart_000_D6C5_38402F7D.C5F44288
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://cloc.sourceforge.net/address.png

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
QjCLRryLMn0AAAAASUVORK5CYII=
------=_NextPart_000_D6C5_38402F7D.C5F44288
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://cloc.sourceforge.net/sflogo.gif

R0lGODlhlgAoAPcAAPLx8P7+/v/+/vHv7/b29kBAQfb19fn4+Pj4+Pv5+fXz8/v7+/z8/D08PD4+
Pj09Pfj29g8PD35+fnp5ebi4uEBAQD8/P3t7e/z7+7a1tRAQELy7u7q6uj49Pby8vPPz83x8fHl5
eCAgIL29vbWzsy0tLX59fX9/fy4uLu/v77u6ur6+vri2tjExMNPR0T8+PrW1tH18fB4eHqWkpO7u
7uLg4Ht6ejAwLw8PEDAwMOjo6ODg4MnIyJ+fn+Df4F5eXczKyoeGhnl4eG1tbc3NzWpqadTT0mpp
aezs7C4tLSAgH7+/vxAQDy8vMO7u7Tw8POzr68bFxG5ubmxsbE9PT7++vunp6Z2dnS4uLUBAP7m3
t9bV1K+vr1taWtra2l9fX0xMTMTEw6Cgn5ubm3p6ekxLS7u6uUxMS+Pi4eXl5cTCwi8vL8rKyqqq
qpaVldDQ0OXk46qpqdrZ2piYl66uriEhIJuamtza24yMjN/f3xAPD6+ur09PULi3uFBQUNzc3NnX
2LCwsF5cXKCgoG9ubl5eXs/PzpmZmV1dXaampqysrZeWlmtra9/f3qalpYiIiFtbWq2trcnJyvDw
8Kimp2tqaR8fHru7u4qJib28vB8fH3BwcMzMy9XU1JiXl3p6eba2tnx7e358fJqYmYCAgM/Ozqyr
q8DAv9nX14B/f+jm5m9vcPPy8v///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH/C1hNUCBEYXRhWE1QPD94
cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1w
bWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS4w
LWMwNjAgNjEuMTM0Nzc3LCAyMDEwLzAyLzEyLTE3OjMyOjAwICAgICAgICAiPiA8cmRmOlJERiB4
bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8
cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2Jl
LmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEu
MC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAv
MS4wLyIgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIiB4bXBNTTpP
cmlnaW5hbERvY3VtZW50SUQ9InV1aWQ6NjVFNjM5MDY4NkNGMTFEQkE2RTJEODg3Q0VBQ0I0MDci
IHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6Q0RFRTc3MjMyNEJEMTFFMEE5QUZGM0E4RDU5NEQz
MTAiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6Q0RFRTc3MjIyNEJEMTFFMEE5QUZGM0E4RDU5
NEQzMTAiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgSWxsdXN0cmF0b3IgQ1M0Ij4gPHhtcE1NOkRl
cml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InV1aWQ6ZGE2MzgyYzItM2U4Ny0zNjQ0LTlkYzYt
YjJmNDZjOTQwNmQxIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjAxODAxMTc0MDcyMDY4MTE4
MkQyQzZGNjVENDk0Njg1Ii8+IDxkYzp0aXRsZT4gPHJkZjpBbHQ+IDxyZGY6bGkgeG1sOmxhbmc9
IngtZGVmYXVsdCI+bG9nbzwvcmRmOmxpPiA8L3JkZjpBbHQ+IDwvZGM6dGl0bGU+IDwvcmRmOkRl
c2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+Af/+
/fz7+vn49/b19PPy8fDv7u3s6+rp6Ofm5eTj4uHg397d3Nva2djX1tXU09LR0M/OzczLysnIx8bF
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
------=_NextPart_000_D6C5_38402F7D.C5F44288--
